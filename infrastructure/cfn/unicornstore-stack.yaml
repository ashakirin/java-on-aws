{
  "Metadata": {
    "cdk_nag": {
      "rules_to_suppress": [
        {
          "reason": "The workshop environment does not require API-Gateway authorization",
          "id": "AwsSolutions-APIG4"
        },
        {
          "reason": "The workshop environment does not require Cognito User Pool authorization",
          "id": "AwsSolutions-COG4"
        },
        {
          "reason": "Workshop environment does not need a Multi-AZ setup to reduce cost",
          "id": "AwsSolutions-RDS3"
        },
        {
          "reason": "AWS Managed policies are acceptable for the workshop",
          "id": "AwsSolutions-IAM4"
        },
        {
          "reason": "A wildcard is acceptable for this workshop to allow parallel creation of resources",
          "id": "AwsSolutions-IAM5"
        },
        {
          "reason": "Workshop environment is ephemeral and the database should be deleted by the end of the workshop",
          "id": "AwsSolutions-RDS10"
        },
        {
          "reason": "Database is in a private subnet and can use the default port",
          "id": "AwsSolutions-RDS11"
        },
        {
          "reason": "API Gateway request validation is not needed for workshop",
          "id": "AwsSolutions-APIG2"
        },
        {
          "reason": "API Gateway access logging not needed for workshop setup",
          "id": "AwsSolutions-APIG1"
        },
        {
          "reason": "API Gateway access logging not needed for workshop setup",
          "id": "AwsSolutions-APIG6"
        },
        {
          "reason": "Workshop environment does not need VPC flow logs",
          "id": "AwsSolutions-VPC7"
        },
        {
          "reason": "Ephemeral workshop environment does not need to rotate secrets",
          "id": "AwsSolutions-SMG4"
        },
        {
          "reason": "Workshop non-sensitive test database does not need encryption at rest",
          "id": "AwsSolutions-RDS2"
        },
        {
          "reason": "Workshop API Gateways do not need AWS WAF assigned",
          "id": "AwsSolutions-APIG3"
        },
        {
          "reason": "Not needed",
          "id": "AwsSolutions-EC23"
        },
        {
          "reason": "Workshop Database does not need backups",
          "id": "AwsSolutions-RDS13"
        },
        {
          "reason": "Workshop S3 bucket does not need Access Logs",
          "id": "AwsSolutions-S1"
        },
        {
          "reason": "Workshop environment use CDK default Lambdas",
          "id": "AwsSolutions-L1"
        },
        {
          "reason": "Workshop environment uses user/password authentication",
          "id": "AwsSolutions-RDS6"
        },
        {
          "reason": "Workshop instance doesn't need autoscaling",
          "id": "AwsSolutions-EC28"
        },
        {
          "reason": "Workshop instance doesn't need autoscaling",
          "id": "AwsSolutions-EC29"
        },
        {
          "reason": "Workshop environment should be accessible from any Geo",
          "id": "AwsSolutions-CFR1"
        },
        {
          "reason": "Ephemeral workshop environment does not need WAF",
          "id": "AwsSolutions-CFR2"
        },
        {
          "reason": "Ephemeral workshop environment does not need logging",
          "id": "AwsSolutions-CFR3"
        },
        {
          "reason": "Workshop instance uses http",
          "id": "AwsSolutions-CFR4"
        },
        {
          "reason": "Workshop instance uses http",
          "id": "AwsSolutions-CFR5"
        },
        {
          "reason": "Workshop non-sensitive EKS cluster uses public access",
          "id": "AwsSolutions-EKS1"
        },
        {
          "reason": "CodeBuild uses default AWS-managed CMK for S3",
          "id": "AwsSolutions-CB4"
        },
        {
          "reason": "Suppress warnings see: https://github.com/cdklabs/cdk-nag/issues/817",
          "id": "CdkNagValidationFailure"
        }
      ]
    }
  },
  "Resources": {
    "UnicornStoreVpc647929A5": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": "10.0.0.0/16",
        "EnableDnsHostnames": true,
        "EnableDnsSupport": true,
        "InstanceTenancy": "default",
        "Tags": [
          {
            "Key": "Name",
            "Value": "unicornstore-vpc"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/UnicornStoreVpc/Vpc/Resource"
      }
    },
    "UnicornStoreVpcPublicSubnet1Subnet5A587A94": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": [
            0,
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "CidrBlock": "10.0.0.0/24",
        "MapPublicIpOnLaunch": true,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Public"
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public"
          },
          {
            "Key": "kubernetes.io/role/elb",
            "Value": "1"
          },
          {
            "Key": "Name",
            "Value": "unicornstore-stack/UnicornStoreVpc/Vpc/PublicSubnet1"
          }
        ],
        "VpcId": {
          "Ref": "UnicornStoreVpc647929A5"
        }
      },
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/UnicornStoreVpc/Vpc/PublicSubnet1/Subnet"
      }
    },
    "UnicornStoreVpcPublicSubnet1RouteTableA6A1DD76": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "Tags": [
          {
            "Key": "kubernetes.io/role/elb",
            "Value": "1"
          },
          {
            "Key": "Name",
            "Value": "unicornstore-stack/UnicornStoreVpc/Vpc/PublicSubnet1"
          }
        ],
        "VpcId": {
          "Ref": "UnicornStoreVpc647929A5"
        }
      },
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/UnicornStoreVpc/Vpc/PublicSubnet1/RouteTable"
      }
    },
    "UnicornStoreVpcPublicSubnet1RouteTableAssociation3D94AF82": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "UnicornStoreVpcPublicSubnet1RouteTableA6A1DD76"
        },
        "SubnetId": {
          "Ref": "UnicornStoreVpcPublicSubnet1Subnet5A587A94"
        }
      },
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/UnicornStoreVpc/Vpc/PublicSubnet1/RouteTableAssociation"
      }
    },
    "UnicornStoreVpcPublicSubnet1DefaultRoute72D8F029": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "UnicornStoreVpcIGW37028CE1"
        },
        "RouteTableId": {
          "Ref": "UnicornStoreVpcPublicSubnet1RouteTableA6A1DD76"
        }
      },
      "DependsOn": [
        "UnicornStoreVpcVPCGW825EF84F"
      ],
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/UnicornStoreVpc/Vpc/PublicSubnet1/DefaultRoute"
      }
    },
    "UnicornStoreVpcPublicSubnet1EIP9D77368A": {
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": "vpc",
        "Tags": [
          {
            "Key": "kubernetes.io/role/elb",
            "Value": "1"
          },
          {
            "Key": "Name",
            "Value": "unicornstore-stack/UnicornStoreVpc/Vpc/PublicSubnet1"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/UnicornStoreVpc/Vpc/PublicSubnet1/EIP"
      }
    },
    "UnicornStoreVpcPublicSubnet1NATGateway1B70C1D9": {
      "Type": "AWS::EC2::NatGateway",
      "Properties": {
        "AllocationId": {
          "Fn::GetAtt": [
            "UnicornStoreVpcPublicSubnet1EIP9D77368A",
            "AllocationId"
          ]
        },
        "SubnetId": {
          "Ref": "UnicornStoreVpcPublicSubnet1Subnet5A587A94"
        },
        "Tags": [
          {
            "Key": "kubernetes.io/role/elb",
            "Value": "1"
          },
          {
            "Key": "Name",
            "Value": "unicornstore-stack/UnicornStoreVpc/Vpc/PublicSubnet1"
          }
        ]
      },
      "DependsOn": [
        "UnicornStoreVpcPublicSubnet1DefaultRoute72D8F029",
        "UnicornStoreVpcPublicSubnet1RouteTableAssociation3D94AF82"
      ],
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/UnicornStoreVpc/Vpc/PublicSubnet1/NATGateway"
      }
    },
    "UnicornStoreVpcPublicSubnet2Subnet6C10127F": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": [
            1,
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "CidrBlock": "10.0.1.0/24",
        "MapPublicIpOnLaunch": true,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Public"
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public"
          },
          {
            "Key": "kubernetes.io/role/elb",
            "Value": "1"
          },
          {
            "Key": "Name",
            "Value": "unicornstore-stack/UnicornStoreVpc/Vpc/PublicSubnet2"
          }
        ],
        "VpcId": {
          "Ref": "UnicornStoreVpc647929A5"
        }
      },
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/UnicornStoreVpc/Vpc/PublicSubnet2/Subnet"
      }
    },
    "UnicornStoreVpcPublicSubnet2RouteTable9C89D84E": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "Tags": [
          {
            "Key": "kubernetes.io/role/elb",
            "Value": "1"
          },
          {
            "Key": "Name",
            "Value": "unicornstore-stack/UnicornStoreVpc/Vpc/PublicSubnet2"
          }
        ],
        "VpcId": {
          "Ref": "UnicornStoreVpc647929A5"
        }
      },
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/UnicornStoreVpc/Vpc/PublicSubnet2/RouteTable"
      }
    },
    "UnicornStoreVpcPublicSubnet2RouteTableAssociationEF6ADCD0": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "UnicornStoreVpcPublicSubnet2RouteTable9C89D84E"
        },
        "SubnetId": {
          "Ref": "UnicornStoreVpcPublicSubnet2Subnet6C10127F"
        }
      },
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/UnicornStoreVpc/Vpc/PublicSubnet2/RouteTableAssociation"
      }
    },
    "UnicornStoreVpcPublicSubnet2DefaultRoute6F034F39": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "UnicornStoreVpcIGW37028CE1"
        },
        "RouteTableId": {
          "Ref": "UnicornStoreVpcPublicSubnet2RouteTable9C89D84E"
        }
      },
      "DependsOn": [
        "UnicornStoreVpcVPCGW825EF84F"
      ],
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/UnicornStoreVpc/Vpc/PublicSubnet2/DefaultRoute"
      }
    },
    "UnicornStoreVpcPrivateSubnet1Subnet1D81DF60": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": [
            0,
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "CidrBlock": "10.0.2.0/24",
        "MapPublicIpOnLaunch": false,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Private"
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Private"
          },
          {
            "Key": "kubernetes.io/role/internal-elb",
            "Value": "1"
          },
          {
            "Key": "Name",
            "Value": "unicornstore-stack/UnicornStoreVpc/Vpc/PrivateSubnet1"
          }
        ],
        "VpcId": {
          "Ref": "UnicornStoreVpc647929A5"
        }
      },
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/UnicornStoreVpc/Vpc/PrivateSubnet1/Subnet"
      }
    },
    "UnicornStoreVpcPrivateSubnet1RouteTable3F4F42C3": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "Tags": [
          {
            "Key": "kubernetes.io/role/internal-elb",
            "Value": "1"
          },
          {
            "Key": "Name",
            "Value": "unicornstore-stack/UnicornStoreVpc/Vpc/PrivateSubnet1"
          }
        ],
        "VpcId": {
          "Ref": "UnicornStoreVpc647929A5"
        }
      },
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/UnicornStoreVpc/Vpc/PrivateSubnet1/RouteTable"
      }
    },
    "UnicornStoreVpcPrivateSubnet1RouteTableAssociationE6E7A751": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "UnicornStoreVpcPrivateSubnet1RouteTable3F4F42C3"
        },
        "SubnetId": {
          "Ref": "UnicornStoreVpcPrivateSubnet1Subnet1D81DF60"
        }
      },
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/UnicornStoreVpc/Vpc/PrivateSubnet1/RouteTableAssociation"
      }
    },
    "UnicornStoreVpcPrivateSubnet1DefaultRoute18CAE313": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": {
          "Ref": "UnicornStoreVpcPublicSubnet1NATGateway1B70C1D9"
        },
        "RouteTableId": {
          "Ref": "UnicornStoreVpcPrivateSubnet1RouteTable3F4F42C3"
        }
      },
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/UnicornStoreVpc/Vpc/PrivateSubnet1/DefaultRoute"
      }
    },
    "UnicornStoreVpcPrivateSubnet2Subnet4710EC68": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": [
            1,
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "CidrBlock": "10.0.3.0/24",
        "MapPublicIpOnLaunch": false,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Private"
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Private"
          },
          {
            "Key": "kubernetes.io/role/internal-elb",
            "Value": "1"
          },
          {
            "Key": "Name",
            "Value": "unicornstore-stack/UnicornStoreVpc/Vpc/PrivateSubnet2"
          }
        ],
        "VpcId": {
          "Ref": "UnicornStoreVpc647929A5"
        }
      },
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/UnicornStoreVpc/Vpc/PrivateSubnet2/Subnet"
      }
    },
    "UnicornStoreVpcPrivateSubnet2RouteTableC066B309": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "Tags": [
          {
            "Key": "kubernetes.io/role/internal-elb",
            "Value": "1"
          },
          {
            "Key": "Name",
            "Value": "unicornstore-stack/UnicornStoreVpc/Vpc/PrivateSubnet2"
          }
        ],
        "VpcId": {
          "Ref": "UnicornStoreVpc647929A5"
        }
      },
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/UnicornStoreVpc/Vpc/PrivateSubnet2/RouteTable"
      }
    },
    "UnicornStoreVpcPrivateSubnet2RouteTableAssociation0C455BE6": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "UnicornStoreVpcPrivateSubnet2RouteTableC066B309"
        },
        "SubnetId": {
          "Ref": "UnicornStoreVpcPrivateSubnet2Subnet4710EC68"
        }
      },
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/UnicornStoreVpc/Vpc/PrivateSubnet2/RouteTableAssociation"
      }
    },
    "UnicornStoreVpcPrivateSubnet2DefaultRouteDA0F8992": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": {
          "Ref": "UnicornStoreVpcPublicSubnet1NATGateway1B70C1D9"
        },
        "RouteTableId": {
          "Ref": "UnicornStoreVpcPrivateSubnet2RouteTableC066B309"
        }
      },
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/UnicornStoreVpc/Vpc/PrivateSubnet2/DefaultRoute"
      }
    },
    "UnicornStoreVpcIGW37028CE1": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "unicornstore-vpc"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/UnicornStoreVpc/Vpc/IGW"
      }
    },
    "UnicornStoreVpcVPCGW825EF84F": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "InternetGatewayId": {
          "Ref": "UnicornStoreVpcIGW37028CE1"
        },
        "VpcId": {
          "Ref": "UnicornStoreVpc647929A5"
        }
      },
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/UnicornStoreVpc/Vpc/VPCGW"
      }
    },
    "UnicornStoreIdeIdeRole81A2CEAA": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ec2.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/ReadOnlyAccess"
              ]
            ]
          },
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/AmazonSSMManagedInstanceCore"
              ]
            ]
          }
        ],
        "RoleName": "unicornstore-ide-user"
      },
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/UnicornStoreIde/IdeRole/Resource"
      }
    },
    "UnicornStoreIdeIdeRoleDefaultPolicy7083F507": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "UnicornStoreIdeIdeLogGroup7A5EFA50",
                  "Arn"
                ]
              }
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret"
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "UnicornStoreIdeIdePasswordSecret514252E2"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "UnicornStoreIdeIdeRoleDefaultPolicy7083F507",
        "Roles": [
          {
            "Ref": "UnicornStoreIdeIdeRole81A2CEAA"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/UnicornStoreIde/IdeRole/DefaultPolicy/Resource"
      }
    },
    "UnicornStoreIdeWorkshopIdeUserPolicy69BE9E43": {
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties": {
        "ManagedPolicyName": "WorkshopIdeUserPolicy",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Action": [
                "cloudwatch:*",
                "codewhisperer:*",
                "ecr:*",
                "eks:*",
                "iam:CreateOpenIDConnectProvider",
                "iam:TagOpenIDConnectProvider",
                "events:*",
                "q:*",
                "secretsmanager:*",
                "ssm:*",
                "sts:*"
              ],
              "Resource": "*",
              "Effect": "Allow",
              "Sid": "AllowedServicesEKS"
            },
            {
              "Action": [
                "iam:PassRole"
              ],
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:iam::",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":role/unicorn*"
                    ]
                  ]
                }
              ],
              "Effect": "Allow",
              "Sid": "PassRoleEKS"
            },
            {
              "Action": [
                "iam:CreateRole",
                "iam:TagRole",
                "iam:DeleteRole",
                "iam:CreatePolicy",
                "iam:CreatePolicyVersion",
                "iam:DeletePolicy",
                "iam:DeletePolicyVersion",
                "iam:AttachRolePolicy",
                "iam:DetachRolePolicy",
                "iam:PutRolePolicy",
                "iam:DeleteRolePolicy",
                "iam:PassRole"
              ],
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:iam::",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":role/*unicorn*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:iam::",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":policy/*unicorn*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:iam::",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":role/*Unicorn*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:iam::",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":policy/*Unicorn*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:iam::",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":policy/*AWSLambdaTracerAccessExecutionRole*"
                    ]
                  ]
                }
              ],
              "Effect": "Allow",
              "Sid": "IamLimitedAccessForUnicorns"
            },
            {
              "Action": [
                "cloudformation:*",
                "codeartifact:*",
                "apprunner:*",
                "ec2:*",
                "ecs:*",
                "elasticloadbalancing:*",
                "xray:*",
                "logs:*",
                "lambda:*",
                "dynamodb:*",
                "route53:*",
                "s3:*",
                "servicediscovery:*",
                "tag:*",
                "application-signals:*"
              ],
              "Resource": "*",
              "Effect": "Allow",
              "Sid": "AllowedServicesOthers"
            },
            {
              "Condition": {
                "StringLike": {
                  "ec2:InstanceType": [
                    "*4xlarge",
                    "*6xlarge",
                    "*8xlarge",
                    "*9xlarge",
                    "*10xlarge",
                    "*12xlarge",
                    "*16xlarge",
                    "*18xlarge",
                    "*24xlarge",
                    "f1*",
                    "x1*",
                    "z1*",
                    "*metal"
                  ]
                }
              },
              "Action": "ec2:RunInstances",
              "Resource": [
                "arn:aws:ec2:*:*:instance/*"
              ],
              "Effect": "Deny",
              "Sid": "DenyXXLInstances"
            },
            {
              "Action": [
                "ec2:ModifyReservedInstances",
                "ec2:PurchaseHostReservation",
                "ec2:PurchaseReservedInstancesOffering",
                "ec2:PurchaseScheduledInstances",
                "rds:PurchaseReservedDBInstancesOffering",
                "dynamodb:PurchaseReservedCapacityOfferings"
              ],
              "Resource": "*",
              "Effect": "Deny",
              "Sid": "DenyReservations"
            }
          ]
        },
        "Roles": [
          {
            "Ref": "UnicornStoreIdeIdeRole81A2CEAA"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/UnicornStoreIde/WorkshopIdeUserPolicy"
      }
    },
    "UnicornStoreIdeIdeLogGroup7A5EFA50": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "unicornstore-ide-bootstrap-log-20250623-191725",
        "RetentionInDays": 7
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/UnicornStoreIde/IdeLogGroup/Resource"
      }
    },
    "UnicornStoreIdeIdePrefixListFunctionServiceRole32E30C10": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/UnicornStoreIde/IdePrefixListFunction/ServiceRole/Resource"
      }
    },
    "UnicornStoreIdeIdePrefixListFunctionServiceRoleDefaultPolicy33F10FE5": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "ec2:DescribeManagedPrefixLists",
              "Effect": "Allow",
              "Resource": "*"
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "UnicornStoreIdeIdePrefixListFunctionServiceRoleDefaultPolicy33F10FE5",
        "Roles": [
          {
            "Ref": "UnicornStoreIdeIdePrefixListFunctionServiceRole32E30C10"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/UnicornStoreIde/IdePrefixListFunction/ServiceRole/DefaultPolicy/Resource"
      }
    },
    "UnicornStoreIdeIdePrefixListFunctionA6A4129C": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "from __future__ import print_function\nimport boto3\nimport traceback\nimport cfnresponse\n\ndef lambda_handler(event, context):\n    print('Event: {}'.format(event))\n    print('context: {}'.format(context))\n    responseData = {}\n\n    status = cfnresponse.SUCCESS\n\n    if event['RequestType'] == 'Delete':\n        responseData = {'Success': 'Custom Resource removed'}\n        cfnresponse.send(event, context, status, responseData, 'CustomResourcePhysicalID')\n    else:\n        try:\n            # Open AWS clients\n            ec2 = boto3.client('ec2')\n\n            res = ec2.describe_managed_prefix_lists(\n               Filters=[{\n                  'Name': 'prefix-list-name',\n                  'Values': ['com.amazonaws.global.cloudfront.origin-facing']\n               }]\n            )\n\n            responseData = {'PrefixListId': str(res['PrefixLists'][0]['PrefixListId'])}\n        except Exception as e:\n            status = cfnresponse.FAILED\n            tb_err = traceback.format_exc()\n            print(tb_err)\n            responseData = {'Error': tb_err}\n        finally:\n            cfnresponse.send(event, context, status, responseData, 'CustomResourcePhysicalID')"
        },
        "FunctionName": "unicornstore-ide-prefix-list-lambda",
        "Handler": "index.lambda_handler",
        "Role": {
          "Fn::GetAtt": [
            "UnicornStoreIdeIdePrefixListFunctionServiceRole32E30C10",
            "Arn"
          ]
        },
        "Runtime": "python3.13",
        "Timeout": 180
      },
      "DependsOn": [
        "UnicornStoreIdeIdePrefixListFunctionServiceRoleDefaultPolicy33F10FE5",
        "UnicornStoreIdeIdePrefixListFunctionServiceRole32E30C10"
      ],
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/UnicornStoreIde/IdePrefixListFunction/Resource"
      }
    },
    "UnicornStoreIdeIdePrefixListResource228B9344": {
      "Type": "AWS::CloudFormation::CustomResource",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "UnicornStoreIdeIdePrefixListFunctionA6A4129C",
            "Arn"
          ]
        }
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/UnicornStoreIde/IdePrefixListResource/Default"
      }
    },
    "UnicornStoreIdeIdeSecurityGroupD6434416": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "IDE security group",
        "GroupName": "unicornstore-ide-cloudfront-ide-sg",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1"
          }
        ],
        "VpcId": {
          "Ref": "UnicornStoreVpc647929A5"
        }
      },
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/UnicornStoreIde/IdeSecurityGroup/Resource"
      }
    },
    "UnicornStoreIdeIdeSecurityGroupfromIndirectPeer80C455E18A": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "Description": "HTTP from CloudFront only",
        "FromPort": 80,
        "GroupId": {
          "Fn::GetAtt": [
            "UnicornStoreIdeIdeSecurityGroupD6434416",
            "GroupId"
          ]
        },
        "IpProtocol": "tcp",
        "SourcePrefixListId": {
          "Fn::GetAtt": [
            "UnicornStoreIdeIdePrefixListResource228B9344",
            "PrefixListId"
          ]
        },
        "ToPort": 80
      },
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/UnicornStoreIde/IdeSecurityGroup/from {IndirectPeer}:80"
      }
    },
    "UnicornStoreIdeAppSecurityGroupA4858227": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "App security group",
        "GroupName": "unicornstore-ide-cloudfront-app-sg",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1"
          }
        ],
        "VpcId": {
          "Ref": "UnicornStoreVpc647929A5"
        }
      },
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/UnicornStoreIde/AppSecurityGroup/Resource"
      }
    },
    "UnicornStoreIdeIdeInstanceProfileCEFB2BB2": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "InstanceProfileName": {
          "Ref": "UnicornStoreIdeIdeRole81A2CEAA"
        },
        "Roles": [
          {
            "Ref": "UnicornStoreIdeIdeRole81A2CEAA"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/UnicornStoreIde/IdeInstanceProfile/Resource"
      }
    },
    "UnicornStoreIdeIdeElasticIP832AF6A3": {
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": "vpc"
      },
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/UnicornStoreIde/IdeElasticIP"
      }
    },
    "UnicornStoreIdeIdeEC2Instance5F393FC5": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": [
            0,
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvda",
            "Ebs": {
              "DeleteOnTermination": true,
              "Encrypted": true,
              "VolumeSize": 50,
              "VolumeType": "gp3"
            }
          }
        ],
        "IamInstanceProfile": {
          "Ref": "UnicornStoreIdeIdeInstanceProfileCEFB2BB2"
        },
        "ImageId": {
          "Ref": "SsmParameterValueawsserviceamiamazonlinuxlatestal2023amikernel61x8664C96584B6F00A464EAD1953AFF4B05118Parameter"
        },
        "InstanceType": "t3.medium",
        "SecurityGroupIds": [
          {
            "Fn::GetAtt": [
              "UnicornStoreIdeIdeSecurityGroupD6434416",
              "GroupId"
            ]
          },
          {
            "Fn::GetAtt": [
              "UnicornStoreIdeIdeInternalSecurityGroup29539F21",
              "GroupId"
            ]
          }
        ],
        "SubnetId": {
          "Ref": "UnicornStoreVpcPublicSubnet1Subnet5A587A94"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "unicornstore-ide"
          }
        ],
        "UserData": {
          "Fn::Base64": "#!/bin/bash"
        }
      },
      "DependsOn": [
        "UnicornStoreIdeIdePasswordSecret514252E2",
        "UnicornStoreIdeIdeRoleDefaultPolicy7083F507",
        "UnicornStoreIdeIdeRole81A2CEAA"
      ],
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/UnicornStoreIde/IdeEC2Instance/Resource"
      }
    },
    "UnicornStoreIdeIdeEipAssociation14729AD1": {
      "Type": "AWS::EC2::EIPAssociation",
      "Properties": {
        "AllocationId": {
          "Fn::GetAtt": [
            "UnicornStoreIdeIdeElasticIP832AF6A3",
            "AllocationId"
          ]
        },
        "InstanceId": {
          "Ref": "UnicornStoreIdeIdeEC2Instance5F393FC5"
        }
      },
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/UnicornStoreIde/IdeEipAssociation"
      }
    },
    "UnicornStoreIdeIdeInternalSecurityGroup29539F21": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "IDE internal security group",
        "GroupName": "unicornstore-ide-internal-sg",
        "VpcId": {
          "Ref": "UnicornStoreVpc647929A5"
        }
      },
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/UnicornStoreIde/IdeInternalSecurityGroup/Resource"
      }
    },
    "UnicornStoreIdeIdeInternalSecurityGroupfromunicornstorestackUnicornStoreIdeIdeInternalSecurityGroupF7E4BE88ALLTRAFFIC61889ED2": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "Description": "Allow all internal traffic",
        "GroupId": {
          "Fn::GetAtt": [
            "UnicornStoreIdeIdeInternalSecurityGroup29539F21",
            "GroupId"
          ]
        },
        "IpProtocol": "-1",
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "UnicornStoreIdeIdeInternalSecurityGroup29539F21",
            "GroupId"
          ]
        }
      },
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/UnicornStoreIde/IdeInternalSecurityGroup/from unicornstorestackUnicornStoreIdeIdeInternalSecurityGroupF7E4BE88:ALL TRAFFIC"
      }
    },
    "UnicornStoreIdeIdeInternalSecurityGrouptounicornstorestackUnicornStoreIdeIdeInternalSecurityGroupF7E4BE88ALLTRAFFIC40FBB5D0": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Properties": {
        "Description": "Allow all internal traffic",
        "DestinationSecurityGroupId": {
          "Fn::GetAtt": [
            "UnicornStoreIdeIdeInternalSecurityGroup29539F21",
            "GroupId"
          ]
        },
        "GroupId": {
          "Fn::GetAtt": [
            "UnicornStoreIdeIdeInternalSecurityGroup29539F21",
            "GroupId"
          ]
        },
        "IpProtocol": "-1"
      },
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/UnicornStoreIde/IdeInternalSecurityGroup/to unicornstorestackUnicornStoreIdeIdeInternalSecurityGroupF7E4BE88:ALL TRAFFIC"
      }
    },
    "UnicornStoreIdeIdeBootstrapWaitConditionHandle3D9B67F1": {
      "Type": "AWS::CloudFormation::WaitConditionHandle",
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/UnicornStoreIde/IdeBootstrapWaitConditionHandle"
      }
    },
    "UnicornStoreIdeIdeBootstrapWaitConditionE9768A2E": {
      "Type": "AWS::CloudFormation::WaitCondition",
      "Properties": {
        "Count": 1,
        "Handle": {
          "Ref": "UnicornStoreIdeIdeBootstrapWaitConditionHandle3D9B67F1"
        },
        "Timeout": "1800"
      },
      "DependsOn": [
        "UnicornStoreIdeIdeBootstrapDocumentE330810B",
        "UnicornStoreIdeIdeEC2Instance5F393FC5"
      ],
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/UnicornStoreIde/IdeBootstrapWaitCondition"
      }
    },
    "UnicornStoreIdeIdeDistribution9A9F0B03": {
      "Type": "AWS::CloudFront::Distribution",
      "Properties": {
        "DistributionConfig": {
          "DefaultCacheBehavior": {
            "AllowedMethods": [
              "GET",
              "HEAD",
              "OPTIONS",
              "PUT",
              "PATCH",
              "POST",
              "DELETE"
            ],
            "CachePolicyId": "4135ea2d-6df8-44a3-9df3-4b5a84be39ad",
            "Compress": true,
            "OriginRequestPolicyId": "216adef6-5c7f-47e4-b989-5492eafa07d3",
            "TargetOriginId": "unicornstorestackUnicornStoreIdeIdeDistributionOrigin1E50C9FB6",
            "ViewerProtocolPolicy": "allow-all"
          },
          "Enabled": true,
          "HttpVersion": "http2",
          "IPV6Enabled": true,
          "Origins": [
            {
              "CustomOriginConfig": {
                "HTTPPort": 80,
                "OriginProtocolPolicy": "http-only",
                "OriginSSLProtocols": [
                  "TLSv1.2"
                ]
              },
              "DomainName": {
                "Fn::GetAtt": [
                  "UnicornStoreIdeIdeEC2Instance5F393FC5",
                  "PublicDnsName"
                ]
              },
              "Id": "unicornstorestackUnicornStoreIdeIdeDistributionOrigin1E50C9FB6"
            }
          ]
        }
      },
      "DependsOn": [
        "UnicornStoreIdeIdeEipAssociation14729AD1"
      ],
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/UnicornStoreIde/IdeDistribution/Resource"
      }
    },
    "UnicornStoreIdeIdePasswordSecret514252E2": {
      "Type": "AWS::SecretsManager::Secret",
      "Properties": {
        "GenerateSecretString": {
          "ExcludeCharacters": "\"@/\\\\",
          "ExcludePunctuation": true,
          "GenerateStringKey": "password",
          "IncludeSpace": false,
          "PasswordLength": 32,
          "SecretStringTemplate": "{\"password\":\"\"}"
        },
        "Name": "unicornstore-ide-password-lambda"
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/UnicornStoreIde/IdePasswordSecret/Resource"
      }
    },
    "UnicornStoreIdeIdePasswordExporterFunctionServiceRoleE9BF6179": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/UnicornStoreIde/IdePasswordExporterFunction/ServiceRole/Resource"
      }
    },
    "UnicornStoreIdeIdePasswordExporterFunctionServiceRoleDefaultPolicy0EF930BA": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret"
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "UnicornStoreIdeIdePasswordSecret514252E2"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "UnicornStoreIdeIdePasswordExporterFunctionServiceRoleDefaultPolicy0EF930BA",
        "Roles": [
          {
            "Ref": "UnicornStoreIdeIdePasswordExporterFunctionServiceRoleE9BF6179"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/UnicornStoreIde/IdePasswordExporterFunction/ServiceRole/DefaultPolicy/Resource"
      }
    },
    "UnicornStoreIdeIdePasswordExporterFunction456E6CFA": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "import traceback\nimport cfnresponse\nimport boto3\nimport json\n\ndef lambda_handler(event, context):\n    print('Event: {}'.format(event))\n    print('context: {}'.format(context))\n    responseData = {}\n\n    status = cfnresponse.SUCCESS\n\n    if event['RequestType'] == 'Delete':\n        cfnresponse.send(event, context, status, responseData, 'CustomResourcePhysicalID')\n    else:\n        try:\n            passwordName = event['ResourceProperties']['PasswordName']\n\n            secretsmanager = boto3.client('secretsmanager')\n\n            response = secretsmanager.get_secret_value(\n                SecretId=passwordName,\n            )\n\n            responseData = json.loads(response['SecretString'])\n        except Exception as e:\n            status = cfnresponse.FAILED\n            tb_err = traceback.format_exc()\n            print(tb_err)\n            responseData = {'Error': tb_err}\n        finally:\n            cfnresponse.send(event, context, status, responseData, 'CustomResourcePhysicalID')"
        },
        "FunctionName": "unicornstore-ide-password-lambda",
        "Handler": "index.lambda_handler",
        "Role": {
          "Fn::GetAtt": [
            "UnicornStoreIdeIdePasswordExporterFunctionServiceRoleE9BF6179",
            "Arn"
          ]
        },
        "Runtime": "python3.13",
        "Timeout": 180
      },
      "DependsOn": [
        "UnicornStoreIdeIdePasswordExporterFunctionServiceRoleDefaultPolicy0EF930BA",
        "UnicornStoreIdeIdePasswordExporterFunctionServiceRoleE9BF6179"
      ],
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/UnicornStoreIde/IdePasswordExporterFunction/Resource"
      }
    },
    "UnicornStoreIdeIdePasswordExporter0662A4D7": {
      "Type": "AWS::CloudFormation::CustomResource",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "UnicornStoreIdeIdePasswordExporterFunction456E6CFA",
            "Arn"
          ]
        },
        "PasswordName": {
          "Fn::Join": [
            "-",
            [
              {
                "Fn::Select": [
                  0,
                  {
                    "Fn::Split": [
                      "-",
                      {
                        "Fn::Select": [
                          6,
                          {
                            "Fn::Split": [
                              ":",
                              {
                                "Ref": "UnicornStoreIdeIdePasswordSecret514252E2"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "Fn::Select": [
                  1,
                  {
                    "Fn::Split": [
                      "-",
                      {
                        "Fn::Select": [
                          6,
                          {
                            "Fn::Split": [
                              ":",
                              {
                                "Ref": "UnicornStoreIdeIdePasswordSecret514252E2"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "Fn::Select": [
                  2,
                  {
                    "Fn::Split": [
                      "-",
                      {
                        "Fn::Select": [
                          6,
                          {
                            "Fn::Split": [
                              ":",
                              {
                                "Ref": "UnicornStoreIdeIdePasswordSecret514252E2"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "Fn::Select": [
                  3,
                  {
                    "Fn::Split": [
                      "-",
                      {
                        "Fn::Select": [
                          6,
                          {
                            "Fn::Split": [
                              ":",
                              {
                                "Ref": "UnicornStoreIdeIdePasswordSecret514252E2"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          ]
        }
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/UnicornStoreIde/IdePasswordExporter/Default"
      }
    },
    "UnicornStoreIdeIdeBootstrapDocumentE330810B": {
      "Type": "AWS::SSM::Document",
      "Properties": {
        "Content": {
          "schemaVersion": "2.2",
          "description": "Bootstrap IDE",
          "parameters": {
            "BootstrapScript": {
              "default": "",
              "description": "(Optional) Custom bootstrap script to run.",
              "type": "String"
            }
          },
          "mainSteps": [
            {
              "inputs": {
                "runCommand": [
                  {
                    "Fn::Sub": [
                      "bash << 'HEREDOC'\nset -e\n\necho \"Retrieving IDE password...\"\n\nPASSWORD_SECRET_VALUE=$(aws secretsmanager get-secret-value --secret-id \"${passwordName}\" --query 'SecretString' --output text)\n\nexport IDE_PASSWORD=$(echo \"$PASSWORD_SECRET_VALUE\" | jq -r '.password')\n\necho \"Setting profile variables...\"\n\n# Set some useful variables\nexport TOKEN=$(curl -X PUT \"http://169.254.169.254/latest/api/token\" -H \"X-aws-ec2-metadata-token-ttl-seconds: 21600\")\nexport AWS_REGION=$(curl -H \"X-aws-ec2-metadata-token: $TOKEN\" -s http://169.254.169.254/latest/dynamic/instance-identity/document | grep region | awk -F\\\" '{print $4}')\nexport EC2_PRIVATE_IP=$(curl -H \"X-aws-ec2-metadata-token: $TOKEN\" -s http://169.254.169.254/latest/meta-data/local-ipv4)\nexport EC2_DOMAIN=$(curl -H \"X-aws-ec2-metadata-token: $TOKEN\" -s http://169.254.169.254/latest/meta-data/public-hostname)\nexport EC2_URL=\"http://$EC2_DOMAIN\"\n\nif [ -z \"${domain}\" ]; then\n  export IDE_DOMAIN=$(aws cloudfront list-distributions --query 'DistributionList.Items[0].DomainName' --output text)\nelse\n  export IDE_DOMAIN=\"${domain}\"\nfi\n\ntee /etc/profile.d/workshop.sh <<EOF\nexport INSTANCE_IAM_ROLE_NAME=\"${instanceIamRoleName}\"\nexport INSTANCE_IAM_ROLE_ARN=\"${instanceIamRoleArn}\"\n\nexport AWS_REGION=\"$AWS_REGION\"\nexport AWS_DEFAULT_REGION=\"$AWS_REGION\"\nexport EC2_PRIVATE_IP=\"$EC2_PRIVATE_IP\"\nexport EC2_DOMAIN=\"$EC2_DOMAIN\"\nexport EC2_URL=\"$EC2_URL\"\n\nexport IDE_DOMAIN=\"$IDE_DOMAIN\"\nexport IDE_URL=\"https://$IDE_DOMAIN\"\nexport IDE_PASSWORD=\"$IDE_PASSWORD\"\n\nalias code=\"code-server\"\nEOF\n\nsource /etc/profile.d/workshop.sh\n\necho \"Setting PS1...\"\n\n# Set PS1\ntee /etc/profile.d/custom_prompt.sh <<EOF\n#!/bin/sh\n\nexport PROMPT_COMMAND='export PS1=\"\\u:\\w:$ \"'\nEOF\n\necho \"Generating SSH key...\"\n\n# Generate an SSH key for ec2-user\nsudo -u ec2-user bash -c \"ssh-keygen -t rsa -N '' -f ~/.ssh/id_rsa -m pem <<< y\"\n\necho \"Installing AWS CLI...\"\n\n# Install AWS CLI\ncurl -LSsf -o /tmp/aws-cli.zip https://awscli.amazonaws.com/awscli-exe-linux-$(uname -m).zip\nunzip -q -d /tmp /tmp/aws-cli.zip\n/tmp/aws/install --update\nrm -rf /tmp/aws*\n\necho \"export ACCOUNT_ID=$(aws sts get-caller-identity --output text --query Account)\" | sudo tee -a /etc/profile.d/workshop.sh\nsource /etc/profile.d/workshop.sh\n\necho \"Installing Docker...\"\n\n# Install docker and base package\ndnf install -y -q docker git >/dev/null\nservice docker start\nusermod -aG docker ec2-user\n\necho \"Installing code-server...\"\n\n# Install code-server\ncodeServer=$(dnf list installed code-server | wc -l)\nif [ \"$codeServer\" -eq \"0\" ]; then\n  sudo -u ec2-user \"codeServerVersion=${codeServerVersion}\" bash -c 'curl -fsSL https://code-server.dev/install.sh | sh -s -- --version ${codeServerVersion}'\n  systemctl enable --now code-server@ec2-user\nfi\n\nsudo -u ec2-user bash -c 'mkdir -p ~/.config/code-server'\nsudo -u ec2-user bash -c 'touch ~/.config/code-server/config.yaml'\ntee /home/ec2-user/.config/code-server/config.yaml <<EOF\ncert: false\nauth: password\npassword: \"$IDE_PASSWORD\"\nbind-addr: 127.0.0.1:8889\nEOF\n\n# Create default directory for workspace\nsudo -u ec2-user bash -c 'mkdir -p ~/environment'\n\nENVIRONMENT_CONTENTS_ZIP=${environmentContentsZip}\n\nif [ ! -z \"$ENVIRONMENT_CONTENTS_ZIP\" ]; then\n  echo \"Adding environments archive...\"\n\n  if [[ $ENVIRONMENT_CONTENTS_ZIP == s3:* ]]; then\n    aws s3 cp $ENVIRONMENT_CONTENTS_ZIP /tmp/environment.zip\n  else\n    curl -LSsf -o /tmp/environment.zip $ENVIRONMENT_CONTENTS_ZIP\n  fi\n\n  sudo -u ec2-user bash -c 'unzip -q /tmp/environment.zip -d ~/environment'\n\n  rm -rf /tmp/environment.zip\nfi\n\nSTARTUP_EDITOR='none'\n\nTERMINAL_ON_STARTUP=\"${terminalOnStartup}\"\nREADME_URL=\"${readmeUrl}\"\n\nif [ ! -z \"$README_URL\" ]; then\n  echo \"Adding README...\"\n  if [[ $README_URL == s3:* ]]; then\n    aws s3 cp $README_URL /home/ec2-user/environment/README.md\n  else\n    curl -LSsf -o /home/ec2-user/environment/README.md $README_URL\n  fi\nfi\n\nif [ \"$TERMINAL_ON_STARTUP\" = \"true\" ]; then\n  STARTUP_EDITOR='terminal'\nelif [ -f /home/ec2-user/environment/README.md ]; then\n  STARTUP_EDITOR='readme'\nfi\n\necho \"Configuring code-server...\"\n\nsudo -u ec2-user bash -c 'mkdir -p ~/.local/share/code-server/User'\nsudo -u ec2-user bash -c 'touch ~/.local/share/code-server/User/settings.json'\ntee /home/ec2-user/.local/share/code-server/User/settings.json <<EOF\n{\n  \"extensions.autoUpdate\": false,\n  \"extensions.autoCheckUpdates\": false,\n  \"security.workspace.trust.enabled\": false,\n  \"workbench.startupEditor\": \"$STARTUP_EDITOR\",\n  \"task.allowAutomaticTasks\": \"on\",\n  \"telemetry.telemetryLevel\": \"off\",\n  \"update.mode\": \"none\"\n}\nEOF\n\nsudo -u ec2-user bash -c 'touch ~/.local/share/code-server/User/keybindings.json'\ntee /home/ec2-user/.local/share/code-server/User/keybindings.json << 'EOF'\n[\n  {\n    \"key\": \"shift+cmd+/\",\n    \"command\": \"remote.tunnel.forwardCommandPalette\"\n  }\n]\nEOF\n\nif [ ! -z \"${splashUrl}\" ]; then\necho \"Configuring splash URL...\"\n\nsudo -u ec2-user bash -c 'touch ~/.local/share/code-server/User/tasks.json'\ntee /home/ec2-user/.local/share/code-server/User/tasks.json << 'EOF'\n{\n  \"version\": \"2.0.0\",\n  \"tasks\": [\n    {\n      \"label\": \"Open Splash\",\n      \"command\": \"${!input:openSimpleBrowser}\",\n      \"presentation\": {\n        \"reveal\": \"always\",\n        \"panel\": \"new\"\n      },\n      \"runOptions\": {\n        \"runOn\": \"folderOpen\"\n      }\n    }\n  ],\n  \"inputs\": [\n    {\n      \"id\": \"openSimpleBrowser\",\n      \"type\": \"command\",\n      \"command\": \"simpleBrowser.show\",\n      \"args\": [\n        \"${splashUrl}\"\n      ]\n    }\n  ]\n}\nEOF\nfi\n\necho \"Installing code-server extensions...\"\n\nEXTENSIONS=\"${extensions}\"\n\nIFS=',' read -ra array <<< \"$EXTENSIONS\"\n\n# Iterate over each entry in the array\nfor extension in \"${!array[@]}\"; do\n  # Use retries as extension installation seems unreliable\n  sudo -u ec2-user bash -c \"set -e; (r=5;while ! code-server --install-extension $extension --force ; do ((--r))||exit;sleep 5;done)\"\ndone\n\nif [ ! -f \"/home/ec2-user/.local/share/code-server/coder.json\" ]; then\n  sudo -u ec2-user bash -c 'touch ~/.local/share/code-server/coder.json'\n  echo '{ \"query\": { \"folder\": \"/home/ec2-user/environment\" } }' > /home/ec2-user/.local/share/code-server/coder.json\nfi\n\necho \"Restarting code-server...\"\n\nsystemctl restart code-server@ec2-user\n\necho \"Installing Caddy...\"\n\n# Install caddy\ndnf copr enable -y -q @caddy/caddy epel-9-x86_64\ndnf install -y -q caddy\nsystemctl enable --now caddy\n\ntee /etc/caddy/Caddyfile <<EOF\n:80 {\n  handle /* {\n    reverse_proxy 127.0.0.1:8889\n  }\n  #GITEA\n}\nEOF\n\necho \"Restarting caddy...\"\n\nsystemctl restart caddy\n\nif [ ! -f \"/home/ec2-user/.local/share/code-server/coder.json\" ]; then\n  sudo -u ec2-user bash -c 'touch ~/.local/share/code-server/coder.json'\n  echo '{ \"query\": { \"folder\": \"/home/ec2-user/environment\" } }' > /home/ec2-user/.local/share/code-server/coder.json\nfi\n\n${installGitea}\n\necho \"Running custom bootstrap script...\"\n\n${customBootstrapScript}\nHEREDOC\n\nexit_code=$?\n\n/opt/aws/bin/cfn-signal -e $exit_code '${waitConditionHandleUrl}'\n\nexit $exit_code",
                      {
                        "splashUrl": "",
                        "instanceIamRoleArn": {
                          "Fn::GetAtt": [
                            "UnicornStoreIdeIdeRole81A2CEAA",
                            "Arn"
                          ]
                        },
                        "readmeUrl": "",
                        "waitConditionHandleUrl": {
                          "Ref": "UnicornStoreIdeIdeBootstrapWaitConditionHandle3D9B67F1"
                        },
                        "extensions": "ms-azuretools.vscode-docker,ms-kubernetes-tools.vscode-kubernetes-tools,vscjava.vscode-java-pack",
                        "domain": "",
                        "installGitea": "echo bootstrapGitea was not provided",
                        "terminalOnStartup": "true",
                        "environmentContentsZip": "",
                        "passwordName": {
                          "Fn::Join": [
                            "-",
                            [
                              {
                                "Fn::Select": [
                                  0,
                                  {
                                    "Fn::Split": [
                                      "-",
                                      {
                                        "Fn::Select": [
                                          6,
                                          {
                                            "Fn::Split": [
                                              ":",
                                              {
                                                "Ref": "UnicornStoreIdeIdePasswordSecret514252E2"
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              },
                              {
                                "Fn::Select": [
                                  1,
                                  {
                                    "Fn::Split": [
                                      "-",
                                      {
                                        "Fn::Select": [
                                          6,
                                          {
                                            "Fn::Split": [
                                              ":",
                                              {
                                                "Ref": "UnicornStoreIdeIdePasswordSecret514252E2"
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              },
                              {
                                "Fn::Select": [
                                  2,
                                  {
                                    "Fn::Split": [
                                      "-",
                                      {
                                        "Fn::Select": [
                                          6,
                                          {
                                            "Fn::Split": [
                                              ":",
                                              {
                                                "Ref": "UnicornStoreIdeIdePasswordSecret514252E2"
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              },
                              {
                                "Fn::Select": [
                                  3,
                                  {
                                    "Fn::Split": [
                                      "-",
                                      {
                                        "Fn::Select": [
                                          6,
                                          {
                                            "Fn::Split": [
                                              ":",
                                              {
                                                "Ref": "UnicornStoreIdeIdePasswordSecret514252E2"
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          ]
                        },
                        "customBootstrapScript": "date\n\necho '=== Clone Git repository ==='\nsudo -H -u ec2-user bash -c \"git clone https://github.com/aws-samples/java-on-aws ~/java-on-aws/\"\n# sudo -H -u ec2-user bash -c \"cd ~/java-on-aws && git checkout refactoring\"\n\necho '=== Setup IDE ==='\nsudo -H -i -u ec2-user bash -c \"~/java-on-aws/infrastructure/scripts/setup/ide.sh\"\n\necho '=== Additional Setup ==='\nsudo -H -i -u ec2-user bash -c \"~/java-on-aws/infrastructure/scripts/setup/app.sh\"\nsudo -H -i -u ec2-user bash -c \"~/java-on-aws/infrastructure/scripts/setup/eks.sh\"\n",
                        "codeServerVersion": "4.98.2",
                        "instanceIamRoleName": {
                          "Ref": "UnicornStoreIdeIdeRole81A2CEAA"
                        }
                      }
                    ]
                  }
                ]
              },
              "name": "IdeBootstrapFunction",
              "action": "aws:runShellScript"
            }
          ]
        },
        "DocumentFormat": "YAML",
        "DocumentType": "Command",
        "Name": "unicornstore-ide-bootstrap-document",
        "UpdateMethod": "NewVersion"
      },
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/UnicornStoreIde/IdeBootstrapDocument"
      }
    },
    "UnicornStoreIdeIdeBootstrapFunctionServiceRole3CD8C4AA": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/UnicornStoreIde/IdeBootstrapFunction/ServiceRole/Resource"
      }
    },
    "UnicornStoreIdeIdeBootstrapFunctionServiceRoleDefaultPolicyA8D6D12D": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "UnicornStoreIdeIdeRole81A2CEAA",
                  "Arn"
                ]
              }
            },
            {
              "Action": [
                "ec2:DescribeInstances",
                "iam:ListInstanceProfiles",
                "ssm:DescribeInstanceInformation",
                "ssm:SendCommand",
                "ssm:GetCommandInvocation"
              ],
              "Effect": "Allow",
              "Resource": "*"
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "UnicornStoreIdeIdeBootstrapFunctionServiceRoleDefaultPolicyA8D6D12D",
        "Roles": [
          {
            "Ref": "UnicornStoreIdeIdeBootstrapFunctionServiceRole3CD8C4AA"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/UnicornStoreIde/IdeBootstrapFunction/ServiceRole/DefaultPolicy/Resource"
      }
    },
    "UnicornStoreIdeIdeBootstrapFunctionF57074A6": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "from __future__ import print_function\nimport boto3\nimport json\nimport os\nimport time\nimport traceback\nimport cfnresponse\nfrom botocore.exceptions import WaiterError\n\ndef lambda_handler(event, context):\n    print('Event: {}'.format(event))\n    print('context: {}'.format(context))\n    responseData = {}\n\n    status = cfnresponse.SUCCESS\n\n    if event['RequestType'] == 'Delete':\n        responseData = {'Success': 'Custom Resource removed'}\n        cfnresponse.send(event, context, status, responseData, 'CustomResourcePhysicalID')\n    else:\n        try:\n            # Open AWS clients\n            ec2 = boto3.client('ec2')\n            ssm = boto3.client('ssm')\n\n            instance_id = event['ResourceProperties']['InstanceId']\n\n            print('Waiting for the instance to be ready...')\n            # Wait for Instance to become ready\n            instance_state = 'unknown'\n            print('Instance is currently in state'.format(instance_state))\n            while instance_state != 'running':\n                time.sleep(5)\n                di = ec2.describe_instances(InstanceIds=[instance_id])\n                instance_state = di['Reservations'][0]['Instances'][0]['State']['Name']\n                print('Waiting for instance in state: {}'.format(instance_state))\n\n            print('Instance is ready')\n\n            print('Waiting for instance to come online in SSM...')\n            for i in range(1, 60):\n              response = ssm.describe_instance_information(Filters=[{'Key': 'InstanceIds', 'Values': [instance_id]}])\n              if len(response[\"InstanceInformationList\"]) == 0:\n                print('No instances in SSM')\n              elif len(response[\"InstanceInformationList\"]) > 0 and \\\n                    response[\"InstanceInformationList\"][0][\"PingStatus\"] == \"Online\" and \\\n                    response[\"InstanceInformationList\"][0][\"InstanceId\"] == instance_id:\n                print('Instance is online in SSM')\n                break\n              time.sleep(10)\n\n            ssm_document = event['ResourceProperties']['SsmDocument']\n\n            ssm.send_command(\n                InstanceIds=[instance_id],\n                DocumentName=ssm_document,\n                CloudWatchOutputConfig={\n                    'CloudWatchLogGroupName': event['ResourceProperties']['LogGroupName'],\n                    'CloudWatchOutputEnabled': True\n                })\n\n            responseData = {'Success': 'Started bootstrapping for instance: '+instance_id}\n        except Exception as e:\n            status = cfnresponse.FAILED\n            tb_err = traceback.format_exc()\n            print(tb_err)\n            responseData = {'Error': tb_err}\n        finally:\n            cfnresponse.send(event, context, status, responseData, 'CustomResourcePhysicalID')"
        },
        "FunctionName": "unicornstore-ide-bootstrap-lambda",
        "Handler": "index.lambda_handler",
        "Role": {
          "Fn::GetAtt": [
            "UnicornStoreIdeIdeBootstrapFunctionServiceRole3CD8C4AA",
            "Arn"
          ]
        },
        "Runtime": "python3.13",
        "Timeout": 900
      },
      "DependsOn": [
        "UnicornStoreIdeIdeBootstrapFunctionServiceRoleDefaultPolicyA8D6D12D",
        "UnicornStoreIdeIdeBootstrapFunctionServiceRole3CD8C4AA"
      ],
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/UnicornStoreIde/IdeBootstrapFunction/Resource"
      }
    },
    "UnicornStoreIdeIdeBootstrapResourceB07B1E57": {
      "Type": "AWS::CloudFormation::CustomResource",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "UnicornStoreIdeIdeBootstrapFunctionF57074A6",
            "Arn"
          ]
        },
        "InstanceId": {
          "Ref": "UnicornStoreIdeIdeEC2Instance5F393FC5"
        },
        "LogGroupName": {
          "Ref": "UnicornStoreIdeIdeLogGroup7A5EFA50"
        },
        "SsmDocument": {
          "Ref": "UnicornStoreIdeIdeBootstrapDocumentE330810B"
        }
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/UnicornStoreIde/IdeBootstrapResource/Default"
      }
    },
    "ThreadDumpBucketAnalysisBucket24BBE8D5": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        },
        "BucketName": "unicorn-analysis-20250623-191726",
        "LifecycleConfiguration": {
          "Rules": [
            {
              "ExpirationInDays": 90,
              "Status": "Enabled"
            },
            {
              "NoncurrentVersionExpiration": {
                "NoncurrentDays": 30
              },
              "Status": "Enabled"
            }
          ]
        },
        "PublicAccessBlockConfiguration": {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true
        },
        "VersioningConfiguration": {
          "Status": "Enabled"
        }
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/ThreadDumpBucket/AnalysisBucket/Resource"
      }
    },
    "ThreadDumpBucketAnalysisBucketPolicy3EA56320": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ThreadDumpBucketAnalysisBucket24BBE8D5"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": "false"
                }
              },
              "Effect": "Deny",
              "Principal": {
                "AWS": "*"
              },
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "ThreadDumpBucketAnalysisBucket24BBE8D5",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "ThreadDumpBucketAnalysisBucket24BBE8D5",
                          "Arn"
                        ]
                      },
                      "/*"
                    ]
                  ]
                }
              ],
              "Sid": "EnforceSSLOnly"
            }
          ],
          "Version": "2012-10-17"
        }
      },
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/ThreadDumpBucket/AnalysisBucket/Policy/Resource"
      }
    },
    "InfrastructureLambdaBedrockBedrockAccessRole0508A770": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "bedrock.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "Description": "Role for Bedrock Claude 3.7 access"
      },
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/InfrastructureLambdaBedrock/BedrockAccessRole/Resource"
      }
    },
    "InfrastructureLambdaBedrockBedrockAccessRoleDefaultPolicyD0E24ECF": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "bedrock:InvokeModel",
                "bedrock:ListFoundationModels"
              ],
              "Effect": "Allow",
              "Resource": "arn:aws:bedrock:*:*:inference-profile/eu.anthropic.claude-3-7-sonnet-20250219-v1:0"
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "InfrastructureLambdaBedrockBedrockAccessRoleDefaultPolicyD0E24ECF",
        "Roles": [
          {
            "Ref": "InfrastructureLambdaBedrockBedrockAccessRole0508A770"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/InfrastructureLambdaBedrock/BedrockAccessRole/DefaultPolicy/Resource"
      }
    },
    "InfrastructureLambdaBedrockLambdaBedrockRole9D26A2B1": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "Description": "Role for Lambda to access Bedrock",
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/InfrastructureLambdaBedrock/LambdaBedrockRole/Resource"
      }
    },
    "InfrastructureLambdaBedrockLambdaBedrockRoleDefaultPolicyDA45D677": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
                "bedrock:InvokeModel",
                "bedrock:ListFoundationModels",
                "eks:DescribeCluster",
                "s3:PutObject",
                "sns:Publish"
              ],
              "Effect": "Allow",
              "Resource": [
                "arn:aws:logs:*:*:*",
                "arn:aws:bedrock:*:*:inference-profile/eu.anthropic.claude-3-7-sonnet-20250219-v1:0",
                "arn:aws:eks:*:*:cluster/*",
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:s3:::",
                      {
                        "Ref": "ThreadDumpBucketAnalysisBucket24BBE8D5"
                      },
                      "/*"
                    ]
                  ]
                },
                "arn:aws:sns:*:*:*",
                "arn:aws:bedrock:*:*:foundation-model/*"
              ]
            },
            {
              "Action": [
                "s3:DeleteObject*",
                "s3:PutObject",
                "s3:PutObjectLegalHold",
                "s3:PutObjectRetention",
                "s3:PutObjectTagging",
                "s3:PutObjectVersionTagging",
                "s3:Abort*"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "ThreadDumpBucketAnalysisBucket24BBE8D5",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "ThreadDumpBucketAnalysisBucket24BBE8D5",
                          "Arn"
                        ]
                      },
                      "/*"
                    ]
                  ]
                }
              ]
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "InfrastructureLambdaBedrockLambdaBedrockRoleDefaultPolicyDA45D677",
        "Roles": [
          {
            "Ref": "InfrastructureLambdaBedrockLambdaBedrockRole9D26A2B1"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/InfrastructureLambdaBedrock/LambdaBedrockRole/DefaultPolicy/Resource"
      }
    },
    "InfrastructureLambdaBedrockunicornstorethreaddumplambdaeksEDA4469E": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
          },
          "S3Key": "ca11027cde47a37b71c83bdbc52be2b39152c2dbd444a9cc0fe1197531e58d8e.zip"
        },
        "Environment": {
          "Variables": {
            "APP_LABEL": "unicorn-store-spring",
            "K8S_NAMESPACE": "unicorn-store-spring",
            "EKS_CLUSTER_NAME": "unicorn-store",
            "S3_BUCKET_NAME": {
              "Ref": "ThreadDumpBucketAnalysisBucket24BBE8D5"
            }
          }
        },
        "FunctionName": "unicornstore-thread-dump-lambda",
        "Handler": "lambda_function.lambda_handler",
        "MemorySize": 512,
        "Role": {
          "Fn::GetAtt": [
            "InfrastructureLambdaBedrockLambdaBedrockRole9D26A2B1",
            "Arn"
          ]
        },
        "Runtime": "python3.13",
        "Timeout": 300
      },
      "DependsOn": [
        "InfrastructureLambdaBedrockLambdaBedrockRoleDefaultPolicyDA45D677",
        "InfrastructureLambdaBedrockLambdaBedrockRole9D26A2B1"
      ],
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/InfrastructureLambdaBedrock/unicornstore-thread-dump-lambda-eks/Resource",
        "aws:asset:path": "asset.ca11027cde47a37b71c83bdbc52be2b39152c2dbd444a9cc0fe1197531e58d8e.zip",
        "aws:asset:is-bundled": true,
        "aws:asset:property": "Code"
      }
    },
    "InfrastructureLambdaBedrockunicornstorethreaddumplambdaeksAllowInvokeunicornstorestackMonitoringAlarmTopicCF6BFD0E6940F3A1": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "InfrastructureLambdaBedrockunicornstorethreaddumplambdaeksEDA4469E",
            "Arn"
          ]
        },
        "Principal": "sns.amazonaws.com",
        "SourceArn": {
          "Ref": "MonitoringAlarmTopicAF62D4F1"
        }
      },
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/InfrastructureLambdaBedrock/unicornstore-thread-dump-lambda-eks/AllowInvoke:unicornstorestackMonitoringAlarmTopicCF6BFD0E"
      }
    },
    "InfrastructureLambdaBedrockunicornstorethreaddumplambdaeksAlarmTopic327B517C": {
      "Type": "AWS::SNS::Subscription",
      "Properties": {
        "Endpoint": {
          "Fn::GetAtt": [
            "InfrastructureLambdaBedrockunicornstorethreaddumplambdaeksEDA4469E",
            "Arn"
          ]
        },
        "Protocol": "lambda",
        "TopicArn": {
          "Ref": "MonitoringAlarmTopicAF62D4F1"
        }
      },
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/InfrastructureLambdaBedrock/unicornstore-thread-dump-lambda-eks/AlarmTopic/Resource"
      }
    },
    "UnicornStoreEksClusterEKSClusterRole0A87A100": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "eks.amazonaws.com"
              }
            },
            {
              "Action": [
                "sts:AssumeRole",
                "sts:TagSession"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": "eks.amazonaws.com"
              }
            },
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ec2.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/AmazonEKSClusterPolicy"
              ]
            ]
          },
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/AmazonEKSComputePolicy"
              ]
            ]
          },
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/AmazonEKSBlockStoragePolicy"
              ]
            ]
          },
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/AmazonEKSLoadBalancingPolicy"
              ]
            ]
          },
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/AmazonEKSNetworkingPolicy"
              ]
            ]
          }
        ],
        "RoleName": "unicorn-store-eks-cluster-role"
      },
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/UnicornStoreEksCluster/EKSClusterRole/Resource"
      }
    },
    "UnicornStoreEksClusterEKSClusterNodeRole072C47D2": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ec2.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/AmazonEKSWorkerNodeMinimalPolicy"
              ]
            ]
          },
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/AmazonEC2ContainerRegistryPullOnly"
              ]
            ]
          }
        ],
        "RoleName": "unicorn-store-eks-cluster-node-role"
      },
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/UnicornStoreEksCluster/EKSClusterNodeRole/Resource"
      }
    },
    "UnicornStoreEksClusterEKSClusterBF11D771": {
      "Type": "AWS::EKS::Cluster",
      "Properties": {
        "AccessConfig": {
          "AuthenticationMode": "API",
          "BootstrapClusterCreatorAdminPermissions": true
        },
        "ComputeConfig": {
          "Enabled": true,
          "NodePools": [
            "system",
            "general-purpose"
          ],
          "NodeRoleArn": {
            "Fn::GetAtt": [
              "UnicornStoreEksClusterEKSClusterNodeRole072C47D2",
              "Arn"
            ]
          }
        },
        "KubernetesNetworkConfig": {
          "ElasticLoadBalancing": {
            "Enabled": true
          },
          "IpFamily": "ipv4"
        },
        "Logging": {
          "ClusterLogging": {
            "EnabledTypes": [
              {
                "Type": "api"
              },
              {
                "Type": "audit"
              },
              {
                "Type": "authenticator"
              },
              {
                "Type": "controllerManager"
              },
              {
                "Type": "scheduler"
              }
            ]
          }
        },
        "Name": "unicorn-store",
        "ResourcesVpcConfig": {
          "EndpointPrivateAccess": true,
          "EndpointPublicAccess": true,
          "SecurityGroupIds": [
            {
              "Fn::GetAtt": [
                "UnicornStoreIdeIdeInternalSecurityGroup29539F21",
                "GroupId"
              ]
            }
          ],
          "SubnetIds": [
            {
              "Ref": "UnicornStoreVpcPrivateSubnet1Subnet1D81DF60"
            },
            {
              "Ref": "UnicornStoreVpcPrivateSubnet2Subnet4710EC68"
            }
          ]
        },
        "RoleArn": {
          "Fn::GetAtt": [
            "UnicornStoreEksClusterEKSClusterRole0A87A100",
            "Arn"
          ]
        },
        "StorageConfig": {
          "BlockStorage": {
            "Enabled": true
          }
        },
        "UpgradePolicy": {
          "SupportType": "STANDARD"
        },
        "Version": "1.32"
      },
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/UnicornStoreEksCluster/EKSCluster"
      }
    },
    "UnicornStoreEksClusterAccessEntryunicornstoreideuser92F16088": {
      "Type": "AWS::EKS::AccessEntry",
      "Properties": {
        "AccessPolicies": [
          {
            "AccessScope": {
              "Type": "cluster"
            },
            "PolicyArn": "arn:aws:eks::aws:cluster-access-policy/AmazonEKSClusterAdminPolicy"
          }
        ],
        "ClusterName": "unicorn-store",
        "PrincipalArn": {
          "Fn::GetAtt": [
            "UnicornStoreIdeIdeRole81A2CEAA",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UnicornStoreEksClusterEKSClusterBF11D771"
      ],
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/UnicornStoreEksCluster/AccessEntry-unicornstore-ide-user"
      }
    },
    "MonitoringAlarmTopicAF62D4F1": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "DisplayName": "Unicorn Store Alarms",
        "TopicName": "UnicornStoreAlarms"
      },
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/Monitoring/AlarmTopic/Resource"
      }
    },
    "MonitoringAlarmTopicPolicyB7C299AF": {
      "Type": "AWS::SNS::TopicPolicy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "sns:Publish",
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": "false"
                }
              },
              "Effect": "Deny",
              "Principal": {
                "AWS": "*"
              },
              "Resource": {
                "Ref": "MonitoringAlarmTopicAF62D4F1"
              },
              "Sid": "0"
            }
          ],
          "Version": "2012-10-17"
        },
        "Topics": [
          {
            "Ref": "MonitoringAlarmTopicAF62D4F1"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/Monitoring/AlarmTopicPolicy/Resource"
      }
    },
    "InfrastructureCorepostgresB0D0C6BB": {
      "Type": "AWS::SecretsManager::Secret",
      "Properties": {
        "Description": {
          "Fn::Join": [
            "",
            [
              "Generated by the CDK for stack: ",
              {
                "Ref": "AWS::StackName"
              }
            ]
          ]
        },
        "GenerateSecretString": {
          "ExcludeCharacters": " %+~`#$&*()|[]{}:;<>?!'/@\"\\",
          "GenerateStringKey": "password",
          "PasswordLength": 30,
          "SecretStringTemplate": "{\"username\":\"postgres\"}"
        },
        "Name": "unicornstore-db-secret"
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/InfrastructureCore/postgres/Resource"
      }
    },
    "InfrastructureCorepostgresAttachmentE2B30E5B": {
      "Type": "AWS::SecretsManager::SecretTargetAttachment",
      "Properties": {
        "SecretId": {
          "Ref": "InfrastructureCorepostgresB0D0C6BB"
        },
        "TargetId": {
          "Ref": "InfrastructureCoreUnicornStoreDatabaseF56884BA"
        },
        "TargetType": "AWS::RDS::DBCluster"
      },
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/InfrastructureCore/postgres/Attachment/Resource"
      }
    },
    "InfrastructureCoreDatabaseSG7319389B": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "unicornstore-stack/InfrastructureCore/DatabaseSG",
        "GroupName": "unicornstore-db-sg",
        "SecurityGroupEgress": [
          {
            "CidrIp": "255.255.255.255/32",
            "Description": "Disallow all traffic",
            "FromPort": 252,
            "IpProtocol": "icmp",
            "ToPort": 86
          }
        ],
        "SecurityGroupIngress": [
          {
            "CidrIp": "10.0.0.0/16",
            "Description": "Allow Database Traffic from local network",
            "FromPort": 5432,
            "IpProtocol": "tcp",
            "ToPort": 5432
          }
        ],
        "VpcId": {
          "Ref": "UnicornStoreVpc647929A5"
        }
      },
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/InfrastructureCore/DatabaseSG/Resource"
      }
    },
    "InfrastructureCoreUnicornStoreDatabaseSubnets55C412B8": {
      "Type": "AWS::RDS::DBSubnetGroup",
      "Properties": {
        "DBSubnetGroupDescription": "Subnets for UnicornStoreDatabase database",
        "SubnetIds": [
          {
            "Ref": "UnicornStoreVpcPrivateSubnet1Subnet1D81DF60"
          },
          {
            "Ref": "UnicornStoreVpcPrivateSubnet2Subnet4710EC68"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/InfrastructureCore/UnicornStoreDatabase/Subnets/Default"
      }
    },
    "InfrastructureCoreUnicornStoreDatabaseF56884BA": {
      "Type": "AWS::RDS::DBCluster",
      "Properties": {
        "CopyTagsToSnapshot": true,
        "DBClusterIdentifier": "unicornstore-db-cluster",
        "DBClusterParameterGroupName": "default.aurora-postgresql16",
        "DBSubnetGroupName": {
          "Ref": "InfrastructureCoreUnicornStoreDatabaseSubnets55C412B8"
        },
        "DatabaseName": "unicorns",
        "EnableHttpEndpoint": true,
        "Engine": "aurora-postgresql",
        "EngineVersion": "16.4",
        "MasterUserPassword": {
          "Fn::Join": [
            "",
            [
              "{{resolve:secretsmanager:",
              {
                "Ref": "InfrastructureCorepostgresB0D0C6BB"
              },
              ":SecretString:password::}}"
            ]
          ]
        },
        "MasterUsername": {
          "Fn::Join": [
            "",
            [
              "{{resolve:secretsmanager:",
              {
                "Ref": "InfrastructureCorepostgresB0D0C6BB"
              },
              ":SecretString:username::}}"
            ]
          ]
        },
        "Port": 5432,
        "ServerlessV2ScalingConfiguration": {
          "MaxCapacity": 4,
          "MinCapacity": 0.5
        },
        "VpcSecurityGroupIds": [
          {
            "Fn::GetAtt": [
              "InfrastructureCoreDatabaseSG7319389B",
              "GroupId"
            ]
          }
        ]
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/InfrastructureCore/UnicornStoreDatabase/Resource"
      }
    },
    "InfrastructureCoreUnicornStoreDatabaseUnicornStoreDatabaseWriter1E7762FE": {
      "Type": "AWS::RDS::DBInstance",
      "Properties": {
        "AutoMinorVersionUpgrade": true,
        "DBClusterIdentifier": {
          "Ref": "InfrastructureCoreUnicornStoreDatabaseF56884BA"
        },
        "DBInstanceClass": "db.serverless",
        "DBInstanceIdentifier": "unicornstore-db-writer",
        "Engine": "aurora-postgresql",
        "PromotionTier": 0,
        "PubliclyAccessible": false
      },
      "DependsOn": [
        "UnicornStoreVpcPrivateSubnet1DefaultRoute18CAE313",
        "UnicornStoreVpcPrivateSubnet1RouteTableAssociationE6E7A751",
        "UnicornStoreVpcPrivateSubnet2DefaultRouteDA0F8992",
        "UnicornStoreVpcPrivateSubnet2RouteTableAssociation0C455BE6"
      ],
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/InfrastructureCore/UnicornStoreDatabase/UnicornStoreDatabaseWriter/Resource"
      }
    },
    "InfrastructureCoreUnicornEventBusBBADDC7E": {
      "Type": "AWS::Events::EventBus",
      "Properties": {
        "Name": "unicorns"
      },
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/InfrastructureCore/UnicornEventBus/Resource"
      }
    },
    "InfrastructureCoreApplicationSecurityGroup914702B5": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "unicornstore-stack/InfrastructureCore/ApplicationSecurityGroup",
        "GroupName": "unicornstore-application-sg",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1"
          }
        ],
        "VpcId": {
          "Ref": "UnicornStoreVpc647929A5"
        }
      },
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/InfrastructureCore/ApplicationSecurityGroup/Resource"
      }
    },
    "InfrastructureCoreSsmParameterDBConnectionString2EE427D4": {
      "Type": "AWS::SSM::Parameter",
      "Properties": {
        "AllowedPattern": ".*",
        "Description": "Database Connection String",
        "Name": "unicornstore-db-connection-string",
        "Tier": "Standard",
        "Type": "String",
        "Value": {
          "Fn::Join": [
            "",
            [
              "jdbc:postgresql://",
              {
                "Fn::GetAtt": [
                  "InfrastructureCoreUnicornStoreDatabaseF56884BA",
                  "Endpoint.Address"
                ]
              },
              ":5432/unicorns"
            ]
          ]
        }
      },
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/InfrastructureCore/SsmParameterDBConnectionString/Resource"
      }
    },
    "InfrastructureCoredbSecretPassword1EC1CF00": {
      "Type": "AWS::SecretsManager::Secret",
      "Properties": {
        "Name": "unicornstore-db-password-secret",
        "SecretString": {
          "Fn::Join": [
            "",
            [
              "{{resolve:secretsmanager:",
              {
                "Fn::Join": [
                  "-",
                  [
                    {
                      "Fn::Select": [
                        0,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "InfrastructureCorepostgresB0D0C6BB"
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "Fn::Select": [
                        1,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "InfrastructureCorepostgresB0D0C6BB"
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "Fn::Select": [
                        2,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "InfrastructureCorepostgresB0D0C6BB"
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                ]
              },
              ":SecretString:password::}}"
            ]
          ]
        }
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/InfrastructureCore/dbSecretPassword/Resource"
      }
    },
    "InfrastructureContainersUnicornStoreSpringEcr6CA30876": {
      "Type": "AWS::ECR::Repository",
      "Properties": {
        "EmptyOnDelete": true,
        "ImageScanningConfiguration": {
          "ScanOnPush": false
        },
        "RepositoryName": "unicorn-store-spring"
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/InfrastructureContainers/UnicornStoreSpringEcr/Resource"
      }
    },
    "InfrastructureContainersUnicornStoreVpcConnectorSecurityGroupAF03571F": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "unicornstore-stack/InfrastructureContainers/UnicornStoreVpcConnector/SecurityGroup",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1"
          }
        ],
        "VpcId": {
          "Ref": "UnicornStoreVpc647929A5"
        }
      },
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/InfrastructureContainers/UnicornStoreVpcConnector/SecurityGroup/Resource"
      }
    },
    "InfrastructureContainersUnicornStoreVpcConnector2AD42C47": {
      "Type": "AWS::AppRunner::VpcConnector",
      "Properties": {
        "SecurityGroups": [
          {
            "Fn::GetAtt": [
              "InfrastructureContainersUnicornStoreVpcConnectorSecurityGroupAF03571F",
              "GroupId"
            ]
          }
        ],
        "Subnets": [
          {
            "Ref": "UnicornStoreVpcPrivateSubnet1Subnet1D81DF60"
          },
          {
            "Ref": "UnicornStoreVpcPrivateSubnet2Subnet4710EC68"
          }
        ],
        "VpcConnectorName": "unicornstore-vpc-connector"
      },
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/InfrastructureContainers/UnicornStoreVpcConnector/Resource"
      }
    },
    "InfrastructureContainersUnicornStoreApprunnerRole04B36547": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "tasks.apprunner.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "RoleName": "unicornstore-apprunner-role"
      },
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/InfrastructureContainers/UnicornStoreApprunnerRole/Resource"
      }
    },
    "InfrastructureContainersUnicornStoreApprunnerRoleDefaultPolicyD4268698": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "xray:PutTraceSegments",
              "Effect": "Allow",
              "Resource": "*"
            },
            {
              "Action": "events:PutEvents",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "InfrastructureCoreUnicornEventBusBBADDC7E",
                  "Arn"
                ]
              }
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret"
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "InfrastructureCorepostgresB0D0C6BB"
              }
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret"
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "InfrastructureCoredbSecretPassword1EC1CF00"
              }
            },
            {
              "Action": [
                "ssm:DescribeParameters",
                "ssm:GetParameters",
                "ssm:GetParameter",
                "ssm:GetParameterHistory"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":ssm:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":parameter/",
                    {
                      "Ref": "InfrastructureCoreSsmParameterDBConnectionString2EE427D4"
                    }
                  ]
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "InfrastructureContainersUnicornStoreApprunnerRoleDefaultPolicyD4268698",
        "Roles": [
          {
            "Ref": "InfrastructureContainersUnicornStoreApprunnerRole04B36547"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/InfrastructureContainers/UnicornStoreApprunnerRole/DefaultPolicy/Resource"
      }
    },
    "InfrastructureContainersUnicornStoreApprunnerEcrAccessRoleAFA857D0": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "build.apprunner.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSAppRunnerServicePolicyForECRAccess"
        ],
        "RoleName": "unicornstore-apprunner-ecr-access-role"
      },
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/InfrastructureContainers/UnicornStoreApprunnerEcrAccessRole/Resource"
      }
    },
    "InfrastructureContainersUnicornStoreEcsTaskRoleBB134133": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/CloudWatchLogsFullAccess",
          "arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess"
        ],
        "RoleName": "unicornstore-ecs-task-role"
      },
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/InfrastructureContainers/UnicornStoreEcsTaskRole/Resource"
      }
    },
    "InfrastructureContainersUnicornStoreEcsTaskRoleDefaultPolicy1931FDDE": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "xray:PutTraceSegments",
              "Effect": "Allow",
              "Resource": "*"
            },
            {
              "Action": [
                "logs:PutLogEvents",
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:DescribeLogStreams",
                "logs:DescribeLogGroups",
                "logs:PutRetentionPolicy",
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
                "xray:GetSamplingRules",
                "xray:GetSamplingTargets",
                "xray:GetSamplingStatisticSummaries",
                "cloudwatch:PutMetricData",
                "ssm:GetParameters"
              ],
              "Effect": "Allow",
              "Resource": "*"
            },
            {
              "Action": "events:PutEvents",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "InfrastructureCoreUnicornEventBusBBADDC7E",
                  "Arn"
                ]
              }
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret"
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "InfrastructureCorepostgresB0D0C6BB"
              }
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret"
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "InfrastructureCoredbSecretPassword1EC1CF00"
              }
            },
            {
              "Action": [
                "ssm:DescribeParameters",
                "ssm:GetParameters",
                "ssm:GetParameter",
                "ssm:GetParameterHistory"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":ssm:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":parameter/",
                    {
                      "Ref": "InfrastructureCoreSsmParameterDBConnectionString2EE427D4"
                    }
                  ]
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "InfrastructureContainersUnicornStoreEcsTaskRoleDefaultPolicy1931FDDE",
        "Roles": [
          {
            "Ref": "InfrastructureContainersUnicornStoreEcsTaskRoleBB134133"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/InfrastructureContainers/UnicornStoreEcsTaskRole/DefaultPolicy/Resource"
      }
    },
    "InfrastructureContainersUnicornStoreEcsTaskExecutionRoleFD9A4DF3": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy",
          "arn:aws:iam::aws:policy/CloudWatchLogsFullAccess",
          "arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess"
        ],
        "RoleName": "unicornstore-ecs-task-execution-role"
      },
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/InfrastructureContainers/UnicornStoreEcsTaskExecutionRole/Resource"
      }
    },
    "InfrastructureContainersUnicornStoreEcsTaskExecutionRoleDefaultPolicyF404CE8F": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "logs:CreateLogGroup",
              "Effect": "Allow",
              "Resource": "*"
            },
            {
              "Action": [
                "logs:PutLogEvents",
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:DescribeLogStreams",
                "logs:DescribeLogGroups",
                "logs:PutRetentionPolicy",
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
                "xray:GetSamplingRules",
                "xray:GetSamplingTargets",
                "xray:GetSamplingStatisticSummaries",
                "cloudwatch:PutMetricData",
                "ssm:GetParameters"
              ],
              "Effect": "Allow",
              "Resource": "*"
            },
            {
              "Action": "events:PutEvents",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "InfrastructureCoreUnicornEventBusBBADDC7E",
                  "Arn"
                ]
              }
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret"
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "InfrastructureCorepostgresB0D0C6BB"
              }
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret"
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "InfrastructureCoredbSecretPassword1EC1CF00"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "InfrastructureContainersUnicornStoreEcsTaskExecutionRoleDefaultPolicyF404CE8F",
        "Roles": [
          {
            "Ref": "InfrastructureContainersUnicornStoreEcsTaskExecutionRoleFD9A4DF3"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/InfrastructureContainers/UnicornStoreEcsTaskExecutionRole/DefaultPolicy/Resource"
      }
    },
    "InfrastructureContainersUnicornStoreEksPodRole8FEB03DC": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole",
                "sts:TagSession"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": "pods.eks.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy"
        ],
        "RoleName": "unicornstore-eks-pod-role"
      },
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/InfrastructureContainers/UnicornStoreEksPodRole/Resource"
      }
    },
    "InfrastructureContainersUnicornStoreEksPodRoleDefaultPolicy220DC0A8": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "xray:PutTraceSegments",
              "Effect": "Allow",
              "Resource": "*"
            },
            {
              "Action": [
                "ecs:ListTasks",
                "ecs:DescribeTasks",
                "ecs:ListServices",
                "ecs:DescribeServices",
                "ecs:ListClusters",
                "ecs:DescribeClusters",
                "ecs:ListContainerInstances",
                "ecs:DescribeContainerInstances"
              ],
              "Effect": "Allow",
              "Resource": "*"
            },
            {
              "Action": "events:PutEvents",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "InfrastructureCoreUnicornEventBusBBADDC7E",
                  "Arn"
                ]
              }
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret"
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "InfrastructureCorepostgresB0D0C6BB"
              }
            },
            {
              "Action": [
                "ssm:DescribeParameters",
                "ssm:GetParameters",
                "ssm:GetParameter",
                "ssm:GetParameterHistory"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":ssm:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":parameter/",
                    {
                      "Ref": "InfrastructureCoreSsmParameterDBConnectionString2EE427D4"
                    }
                  ]
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "InfrastructureContainersUnicornStoreEksPodRoleDefaultPolicy220DC0A8",
        "Roles": [
          {
            "Ref": "InfrastructureContainersUnicornStoreEksPodRole8FEB03DC"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/InfrastructureContainers/UnicornStoreEksPodRole/DefaultPolicy/Resource"
      }
    },
    "InfrastructureContainersUnicornStoreDbSecretsManagerPolicyC7CCFF70": {
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties": {
        "Description": "",
        "ManagedPolicyName": "unicornstore-db-secret-policy",
        "Path": "/",
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "secretsmanager:ListSecrets",
              "Effect": "Allow",
              "Resource": "*"
            },
            {
              "Action": [
                "secretsmanager:GetResourcePolicy",
                "secretsmanager:DescribeSecret",
                "secretsmanager:GetSecretValue",
                "secretsmanager:ListSecretVersionIds"
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "InfrastructureCorepostgresB0D0C6BB"
              }
            }
          ],
          "Version": "2012-10-17"
        }
      },
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/InfrastructureContainers/UnicornStoreDbSecretsManagerPolicy/Resource"
      }
    },
    "InfrastructureContainersUnicornStoreEksEsoRole9C22FF84": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole",
                "sts:TagSession"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": "pods.eks.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "RoleName": "unicornstore-eks-eso-role"
      },
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/InfrastructureContainers/UnicornStoreEksEsoRole/Resource"
      }
    },
    "InfrastructureContainersUnicornStoreEksEsoSmRole630D3E08": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole",
                "sts:TagSession"
              ],
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::GetAtt": [
                    "InfrastructureContainersUnicornStoreEksEsoRole9C22FF84",
                    "Arn"
                  ]
                }
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Ref": "InfrastructureContainersUnicornStoreDbSecretsManagerPolicyC7CCFF70"
          }
        ],
        "RoleName": "unicornstore-eks-eso-sm-role"
      },
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/InfrastructureContainers/UnicornStoreEksEsoSmRole/Resource"
      }
    },
    "UnicornStoreDatabaseSetupDatabaseSetupFunctionServiceRoleBC909D59": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          },
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
              ]
            ]
          }
        ]
      },
      "DependsOn": [
        "InfrastructureCoreUnicornStoreDatabaseF56884BA",
        "InfrastructureCoreUnicornStoreDatabaseSubnets55C412B8",
        "InfrastructureCoreUnicornStoreDatabaseUnicornStoreDatabaseWriter1E7762FE",
        "UnicornStoreVpcPrivateSubnet1DefaultRoute18CAE313",
        "UnicornStoreVpcPrivateSubnet1RouteTableAssociationE6E7A751",
        "UnicornStoreVpcPrivateSubnet2DefaultRouteDA0F8992",
        "UnicornStoreVpcPrivateSubnet2RouteTableAssociation0C455BE6"
      ],
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/UnicornStoreDatabaseSetup/DatabaseSetupFunction/ServiceRole/Resource"
      }
    },
    "UnicornStoreDatabaseSetupDatabaseSetupFunctionServiceRoleDefaultPolicyE69B012D": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret"
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "InfrastructureCorepostgresB0D0C6BB"
              }
            },
            {
              "Action": [
                "rds-data:BatchExecuteStatement",
                "rds-data:BeginTransaction",
                "rds-data:CommitTransaction",
                "rds-data:ExecuteStatement",
                "rds-data:RollbackTransaction"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":rds:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":cluster:",
                    {
                      "Ref": "InfrastructureCoreUnicornStoreDatabaseF56884BA"
                    }
                  ]
                ]
              }
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret"
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "InfrastructureCorepostgresAttachmentE2B30E5B"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "UnicornStoreDatabaseSetupDatabaseSetupFunctionServiceRoleDefaultPolicyE69B012D",
        "Roles": [
          {
            "Ref": "UnicornStoreDatabaseSetupDatabaseSetupFunctionServiceRoleBC909D59"
          }
        ]
      },
      "DependsOn": [
        "InfrastructureCoreUnicornStoreDatabaseF56884BA",
        "InfrastructureCoreUnicornStoreDatabaseSubnets55C412B8",
        "InfrastructureCoreUnicornStoreDatabaseUnicornStoreDatabaseWriter1E7762FE",
        "UnicornStoreVpcPrivateSubnet1DefaultRoute18CAE313",
        "UnicornStoreVpcPrivateSubnet1RouteTableAssociationE6E7A751",
        "UnicornStoreVpcPrivateSubnet2DefaultRouteDA0F8992",
        "UnicornStoreVpcPrivateSubnet2RouteTableAssociation0C455BE6"
      ],
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/UnicornStoreDatabaseSetup/DatabaseSetupFunction/ServiceRole/DefaultPolicy/Resource"
      }
    },
    "UnicornStoreDatabaseSetupDatabaseSetupFunction83636DD9": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "import traceback\nimport cfnresponse\nimport boto3\nimport json\n\ndef get_cluster_arn(cluster_id, region, account_id):\n    return f\"arn:aws:rds:{region}:{account_id}:cluster:{cluster_id}\"\n\ndef lambda_handler(event, context):\n    print('Event: {}'.format(event))\n    print('context: {}'.format(context))\n    responseData = {}\n    status = cfnresponse.SUCCESS\n\n    if event['RequestType'] == 'Delete':\n        cfnresponse.send(event, context, status, responseData, 'CustomResourcePhysicalID')\n    else:\n        try:\n            # Get secret name and SQL from resource properties\n            secret_name = event['ResourceProperties']['SecretName']\n            sql_statements = event['ResourceProperties']['SqlStatements']\n\n            # Get AWS account ID and region\n            sts = boto3.client('sts')\n            caller_identity = sts.get_caller_identity()\n            account_id = caller_identity['Account']\n            region = boto3.session.Session().region_name\n            caller_arn = caller_identity['Arn']\n            print(f\"Account ID: {account_id}, Region: {region}\")\n            print(f\"Caller ARN: {caller_arn}\")\n\n            # Get the secret\n            secretsmanager = boto3.client('secretsmanager')\n            secret_details = secretsmanager.describe_secret(\n                SecretId=secret_name\n            )\n            secret_arn = secret_details['ARN']\n            print(f\"Secret ARN: {secret_arn}\")\n\n            secret_response = secretsmanager.get_secret_value(\n                SecretId=secret_name\n            )\n\n            # Parse the secret JSON\n            secret = json.loads(secret_response['SecretString'])\n            # print(f\"Secret: {secret}\")\n\n            # Construct cluster ARN\n            cluster_arn = get_cluster_arn(\n                secret['dbClusterIdentifier'],\n                region,\n                account_id\n            )\n            print(f\"Cluster ARN: {cluster_arn}\")\n\n            # Initialize RDS Data API client\n            rds_data = boto3.client('rds-data')\n\n            # Execute each SQL statement\n            for sql in sql_statements.split(';'):\n                sql = sql.strip()\n                if sql:  # Skip empty statements\n                    try:\n                        response = rds_data.execute_statement(\n                            resourceArn=cluster_arn,\n                            secretArn=secret_arn,\n                            database=secret['dbname'],\n                            sql=sql\n                        )\n                        print(f\"Executed SQL: {sql}\")\n                        print(f\"Response: {response}\")\n                    except Exception as sql_error:\n                        print(f\"Error executing SQL: {sql}\")\n                        print(f\"Error: {str(sql_error)}\")\n                        raise sql_error\n\n            responseData = {'Success': 'Finished database setup.'}\n\n        except Exception as e:\n            status = cfnresponse.FAILED\n            tb_err = traceback.format_exc()\n            print(tb_err)\n            responseData = {'Error': tb_err}\n        finally:\n            cfnresponse.send(event, context, status, responseData, 'CustomResourcePhysicalID')\n"
        },
        "FunctionName": "unicornstore-db-setup-lambda",
        "Handler": "index.lambda_handler",
        "Role": {
          "Fn::GetAtt": [
            "UnicornStoreDatabaseSetupDatabaseSetupFunctionServiceRoleBC909D59",
            "Arn"
          ]
        },
        "Runtime": "python3.13",
        "Timeout": 180,
        "VpcConfig": {
          "SecurityGroupIds": [
            {
              "Fn::GetAtt": [
                "InfrastructureCoreApplicationSecurityGroup914702B5",
                "GroupId"
              ]
            }
          ],
          "SubnetIds": [
            {
              "Ref": "UnicornStoreVpcPrivateSubnet1Subnet1D81DF60"
            },
            {
              "Ref": "UnicornStoreVpcPrivateSubnet2Subnet4710EC68"
            }
          ]
        }
      },
      "DependsOn": [
        "InfrastructureCoreUnicornStoreDatabaseF56884BA",
        "InfrastructureCoreUnicornStoreDatabaseSubnets55C412B8",
        "InfrastructureCoreUnicornStoreDatabaseUnicornStoreDatabaseWriter1E7762FE",
        "UnicornStoreDatabaseSetupDatabaseSetupFunctionServiceRoleDefaultPolicyE69B012D",
        "UnicornStoreDatabaseSetupDatabaseSetupFunctionServiceRoleBC909D59",
        "UnicornStoreVpcPrivateSubnet1DefaultRoute18CAE313",
        "UnicornStoreVpcPrivateSubnet1RouteTableAssociationE6E7A751",
        "UnicornStoreVpcPrivateSubnet2DefaultRouteDA0F8992",
        "UnicornStoreVpcPrivateSubnet2RouteTableAssociation0C455BE6"
      ],
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/UnicornStoreDatabaseSetup/DatabaseSetupFunction/Resource"
      }
    },
    "UnicornStoreDatabaseSetupDatabaseSetupResourceAC963303": {
      "Type": "AWS::CloudFormation::CustomResource",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "UnicornStoreDatabaseSetupDatabaseSetupFunction83636DD9",
            "Arn"
          ]
        },
        "SqlStatements": "CREATE TABLE IF NOT EXISTS unicorns(id TEXT DEFAULT gen_random_uuid() PRIMARY KEY, name TEXT, age TEXT, size TEXT, type TEXT);",
        "SecretName": {
          "Fn::Join": [
            "-",
            [
              {
                "Fn::Select": [
                  0,
                  {
                    "Fn::Split": [
                      "-",
                      {
                        "Fn::Select": [
                          6,
                          {
                            "Fn::Split": [
                              ":",
                              {
                                "Ref": "InfrastructureCorepostgresB0D0C6BB"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "Fn::Select": [
                  1,
                  {
                    "Fn::Split": [
                      "-",
                      {
                        "Fn::Select": [
                          6,
                          {
                            "Fn::Split": [
                              ":",
                              {
                                "Ref": "InfrastructureCorepostgresB0D0C6BB"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "Fn::Select": [
                  2,
                  {
                    "Fn::Split": [
                      "-",
                      {
                        "Fn::Select": [
                          6,
                          {
                            "Fn::Split": [
                              ":",
                              {
                                "Ref": "InfrastructureCorepostgresB0D0C6BB"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          ]
        }
      },
      "DependsOn": [
        "InfrastructureCoreUnicornStoreDatabaseF56884BA",
        "InfrastructureCoreUnicornStoreDatabaseSubnets55C412B8",
        "InfrastructureCoreUnicornStoreDatabaseUnicornStoreDatabaseWriter1E7762FE"
      ],
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/UnicornStoreDatabaseSetup/DatabaseSetupResource/Default"
      }
    },
    "UnicornStoreSpringLambdaUnicornStoreSpringFunctionServiceRole4022F87D": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          },
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
              ]
            ]
          }
        ]
      },
      "DependsOn": [
        "UnicornStoreVpcPrivateSubnet1DefaultRoute18CAE313",
        "UnicornStoreVpcPrivateSubnet1RouteTableAssociationE6E7A751",
        "UnicornStoreVpcPrivateSubnet2DefaultRouteDA0F8992",
        "UnicornStoreVpcPrivateSubnet2RouteTableAssociation0C455BE6"
      ],
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/UnicornStoreSpringLambda/UnicornStoreSpringFunction/ServiceRole/Resource"
      }
    },
    "UnicornStoreSpringLambdaUnicornStoreSpringFunctionServiceRoleDefaultPolicy70B25D8B": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "events:PutEvents",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "InfrastructureCoreUnicornEventBusBBADDC7E",
                  "Arn"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "UnicornStoreSpringLambdaUnicornStoreSpringFunctionServiceRoleDefaultPolicy70B25D8B",
        "Roles": [
          {
            "Ref": "UnicornStoreSpringLambdaUnicornStoreSpringFunctionServiceRole4022F87D"
          }
        ]
      },
      "DependsOn": [
        "UnicornStoreVpcPrivateSubnet1DefaultRoute18CAE313",
        "UnicornStoreVpcPrivateSubnet1RouteTableAssociationE6E7A751",
        "UnicornStoreVpcPrivateSubnet2DefaultRouteDA0F8992",
        "UnicornStoreVpcPrivateSubnet2RouteTableAssociation0C455BE6"
      ],
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/UnicornStoreSpringLambda/UnicornStoreSpringFunction/ServiceRole/DefaultPolicy/Resource"
      }
    },
    "UnicornStoreSpringLambdaUnicornStoreSpringFunction7AAA5034": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "def handler(event, context):\n    return 'placeholder'"
        },
        "Environment": {
          "Variables": {
            "SPRING_DATASOURCE_PASSWORD": {
              "Fn::Join": [
                "",
                [
                  "{{resolve:secretsmanager:",
                  {
                    "Ref": "InfrastructureCorepostgresB0D0C6BB"
                  },
                  ":SecretString:password::}}"
                ]
              ]
            },
            "JAVA_TOOL_OPTIONS": "-XX:+TieredCompilation -XX:TieredStopAtLevel=1",
            "AWS_SERVERLESS_JAVA_CONTAINER_INIT_GRACE_TIME": "500",
            "SPRING_DATASOURCE_HIKARI_maximumPoolSize": "1",
            "SPRING_DATASOURCE_URL": {
              "Fn::Join": [
                "",
                [
                  "jdbc:postgresql://",
                  {
                    "Fn::GetAtt": [
                      "InfrastructureCoreUnicornStoreDatabaseF56884BA",
                      "Endpoint.Address"
                    ]
                  },
                  ":5432/unicorns"
                ]
              ]
            }
          }
        },
        "FunctionName": "unicorn-store-spring",
        "Handler": "com.unicorn.store.StreamLambdaHandler::handleRequest",
        "MemorySize": 2048,
        "Role": {
          "Fn::GetAtt": [
            "UnicornStoreSpringLambdaUnicornStoreSpringFunctionServiceRole4022F87D",
            "Arn"
          ]
        },
        "Runtime": "python3.13",
        "Timeout": 29,
        "VpcConfig": {
          "SecurityGroupIds": [
            {
              "Fn::GetAtt": [
                "InfrastructureCoreApplicationSecurityGroup914702B5",
                "GroupId"
              ]
            }
          ],
          "SubnetIds": [
            {
              "Ref": "UnicornStoreVpcPrivateSubnet1Subnet1D81DF60"
            },
            {
              "Ref": "UnicornStoreVpcPrivateSubnet2Subnet4710EC68"
            }
          ]
        }
      },
      "DependsOn": [
        "UnicornStoreSpringLambdaUnicornStoreSpringFunctionServiceRoleDefaultPolicy70B25D8B",
        "UnicornStoreSpringLambdaUnicornStoreSpringFunctionServiceRole4022F87D",
        "UnicornStoreVpcPrivateSubnet1DefaultRoute18CAE313",
        "UnicornStoreVpcPrivateSubnet1RouteTableAssociationE6E7A751",
        "UnicornStoreVpcPrivateSubnet2DefaultRouteDA0F8992",
        "UnicornStoreVpcPrivateSubnet2RouteTableAssociation0C455BE6"
      ],
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/UnicornStoreSpringLambda/UnicornStoreSpringFunction/Resource"
      }
    },
    "UnicornStoreSpringLambdaUnicornStoreSpringLambdaAliasB787453C": {
      "Type": "AWS::Lambda::Alias",
      "Properties": {
        "FunctionName": {
          "Ref": "UnicornStoreSpringLambdaUnicornStoreSpringFunction7AAA5034"
        },
        "FunctionVersion": "$LATEST",
        "Name": "unicorn-store-spring-alias"
      },
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/UnicornStoreSpringLambda/UnicornStoreSpringLambdaAlias/Resource"
      }
    },
    "UnicornStoreSpringLambdaUnicornStoreSpringApi4582664A": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "unicorn-store-spring-api"
      },
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/UnicornStoreSpringLambda/UnicornStoreSpringApi/Resource"
      }
    },
    "UnicornStoreSpringLambdaUnicornStoreSpringApiCloudWatchRole3CCBD75C": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "apigateway.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"
              ]
            ]
          }
        ]
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/UnicornStoreSpringLambda/UnicornStoreSpringApi/CloudWatchRole/Resource"
      }
    },
    "UnicornStoreSpringLambdaUnicornStoreSpringApiAccountC420FE01": {
      "Type": "AWS::ApiGateway::Account",
      "Properties": {
        "CloudWatchRoleArn": {
          "Fn::GetAtt": [
            "UnicornStoreSpringLambdaUnicornStoreSpringApiCloudWatchRole3CCBD75C",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UnicornStoreSpringLambdaUnicornStoreSpringApi4582664A"
      ],
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/UnicornStoreSpringLambda/UnicornStoreSpringApi/Account"
      }
    },
    "UnicornStoreSpringLambdaUnicornStoreSpringApiDeployment29FB21E40d766f8fbf61131d2b7e90ac4b777f03": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "Description": "Automatically created by the RestApi construct",
        "RestApiId": {
          "Ref": "UnicornStoreSpringLambdaUnicornStoreSpringApi4582664A"
        }
      },
      "DependsOn": [
        "UnicornStoreSpringLambdaUnicornStoreSpringApiproxyANY63FCE106",
        "UnicornStoreSpringLambdaUnicornStoreSpringApiproxyBFAAE77A",
        "UnicornStoreSpringLambdaUnicornStoreSpringApiANYC207093D"
      ],
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/UnicornStoreSpringLambda/UnicornStoreSpringApi/Deployment/Resource"
      }
    },
    "UnicornStoreSpringLambdaUnicornStoreSpringApiDeploymentStageprodF22916DE": {
      "Type": "AWS::ApiGateway::Stage",
      "Properties": {
        "DeploymentId": {
          "Ref": "UnicornStoreSpringLambdaUnicornStoreSpringApiDeployment29FB21E40d766f8fbf61131d2b7e90ac4b777f03"
        },
        "RestApiId": {
          "Ref": "UnicornStoreSpringLambdaUnicornStoreSpringApi4582664A"
        },
        "StageName": "prod"
      },
      "DependsOn": [
        "UnicornStoreSpringLambdaUnicornStoreSpringApiAccountC420FE01"
      ],
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/UnicornStoreSpringLambda/UnicornStoreSpringApi/DeploymentStage.prod/Resource"
      }
    },
    "UnicornStoreSpringLambdaUnicornStoreSpringApiproxyBFAAE77A": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "UnicornStoreSpringLambdaUnicornStoreSpringApi4582664A",
            "RootResourceId"
          ]
        },
        "PathPart": "{proxy+}",
        "RestApiId": {
          "Ref": "UnicornStoreSpringLambdaUnicornStoreSpringApi4582664A"
        }
      },
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/UnicornStoreSpringLambda/UnicornStoreSpringApi/Default/{proxy+}/Resource"
      }
    },
    "UnicornStoreSpringLambdaUnicornStoreSpringApiproxyANYApiPermissionunicornstorestackUnicornStoreSpringLambdaUnicornStoreSpringApiCA38CCB7ANYproxyA0107DA0": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Ref": "UnicornStoreSpringLambdaUnicornStoreSpringLambdaAliasB787453C"
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "UnicornStoreSpringLambdaUnicornStoreSpringApi4582664A"
              },
              "/",
              {
                "Ref": "UnicornStoreSpringLambdaUnicornStoreSpringApiDeploymentStageprodF22916DE"
              },
              "/*/*"
            ]
          ]
        }
      },
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/UnicornStoreSpringLambda/UnicornStoreSpringApi/Default/{proxy+}/ANY/ApiPermission.unicornstorestackUnicornStoreSpringLambdaUnicornStoreSpringApiCA38CCB7.ANY..{proxy+}"
      }
    },
    "UnicornStoreSpringLambdaUnicornStoreSpringApiproxyANYApiPermissionTestunicornstorestackUnicornStoreSpringLambdaUnicornStoreSpringApiCA38CCB7ANYproxy1B198B26": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Ref": "UnicornStoreSpringLambdaUnicornStoreSpringLambdaAliasB787453C"
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "UnicornStoreSpringLambdaUnicornStoreSpringApi4582664A"
              },
              "/test-invoke-stage/*/*"
            ]
          ]
        }
      },
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/UnicornStoreSpringLambda/UnicornStoreSpringApi/Default/{proxy+}/ANY/ApiPermission.Test.unicornstorestackUnicornStoreSpringLambdaUnicornStoreSpringApiCA38CCB7.ANY..{proxy+}"
      }
    },
    "UnicornStoreSpringLambdaUnicornStoreSpringApiproxyANY63FCE106": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "ANY",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Ref": "UnicornStoreSpringLambdaUnicornStoreSpringLambdaAliasB787453C"
                },
                "/invocations"
              ]
            ]
          }
        },
        "ResourceId": {
          "Ref": "UnicornStoreSpringLambdaUnicornStoreSpringApiproxyBFAAE77A"
        },
        "RestApiId": {
          "Ref": "UnicornStoreSpringLambdaUnicornStoreSpringApi4582664A"
        }
      },
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/UnicornStoreSpringLambda/UnicornStoreSpringApi/Default/{proxy+}/ANY/Resource"
      }
    },
    "UnicornStoreSpringLambdaUnicornStoreSpringApiANYApiPermissionunicornstorestackUnicornStoreSpringLambdaUnicornStoreSpringApiCA38CCB7ANYEA33D841": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Ref": "UnicornStoreSpringLambdaUnicornStoreSpringLambdaAliasB787453C"
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "UnicornStoreSpringLambdaUnicornStoreSpringApi4582664A"
              },
              "/",
              {
                "Ref": "UnicornStoreSpringLambdaUnicornStoreSpringApiDeploymentStageprodF22916DE"
              },
              "/*/"
            ]
          ]
        }
      },
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/UnicornStoreSpringLambda/UnicornStoreSpringApi/Default/ANY/ApiPermission.unicornstorestackUnicornStoreSpringLambdaUnicornStoreSpringApiCA38CCB7.ANY.."
      }
    },
    "UnicornStoreSpringLambdaUnicornStoreSpringApiANYApiPermissionTestunicornstorestackUnicornStoreSpringLambdaUnicornStoreSpringApiCA38CCB7ANYBDAA35B4": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Ref": "UnicornStoreSpringLambdaUnicornStoreSpringLambdaAliasB787453C"
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "UnicornStoreSpringLambdaUnicornStoreSpringApi4582664A"
              },
              "/test-invoke-stage/*/"
            ]
          ]
        }
      },
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/UnicornStoreSpringLambda/UnicornStoreSpringApi/Default/ANY/ApiPermission.Test.unicornstorestackUnicornStoreSpringLambdaUnicornStoreSpringApiCA38CCB7.ANY.."
      }
    },
    "UnicornStoreSpringLambdaUnicornStoreSpringApiANYC207093D": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "ANY",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Ref": "UnicornStoreSpringLambdaUnicornStoreSpringLambdaAliasB787453C"
                },
                "/invocations"
              ]
            ]
          }
        },
        "ResourceId": {
          "Fn::GetAtt": [
            "UnicornStoreSpringLambdaUnicornStoreSpringApi4582664A",
            "RootResourceId"
          ]
        },
        "RestApiId": {
          "Ref": "UnicornStoreSpringLambdaUnicornStoreSpringApi4582664A"
        }
      },
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/UnicornStoreSpringLambda/UnicornStoreSpringApi/Default/ANY/Resource"
      }
    },
    "UnicornStoreSpringLambdaLambdaCodeBucket634CED2B": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "PublicAccessBlockConfiguration": {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true
        }
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/UnicornStoreSpringLambda/LambdaCodeBucket/Resource"
      }
    },
    "UnicornStoreSpringLambdaLambdaCodeBucketPolicy6C9419EF": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "UnicornStoreSpringLambdaLambdaCodeBucket634CED2B"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": "false"
                }
              },
              "Effect": "Deny",
              "Principal": {
                "AWS": "*"
              },
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "UnicornStoreSpringLambdaLambdaCodeBucket634CED2B",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "UnicornStoreSpringLambdaLambdaCodeBucket634CED2B",
                          "Arn"
                        ]
                      },
                      "/*"
                    ]
                  ]
                }
              ]
            }
          ],
          "Version": "2012-10-17"
        }
      },
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/UnicornStoreSpringLambda/LambdaCodeBucket/Policy/Resource"
      }
    },
    "UnicornStoreSpringLambdaSsmParameterUnicornStoreBucketName3BEF0218": {
      "Type": "AWS::SSM::Parameter",
      "Properties": {
        "AllowedPattern": ".*",
        "Description": "Unicorn Store Lambda code bucket name",
        "Name": "unicornstore-lambda-bucket-name",
        "Tier": "Standard",
        "Type": "String",
        "Value": {
          "Ref": "UnicornStoreSpringLambdaLambdaCodeBucket634CED2B"
        }
      },
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/UnicornStoreSpringLambda/SsmParameterUnicornStoreBucketName/Resource"
      }
    },
    "UnicornStoreCodeBuildCodeBuildRoleB9CE0DE7": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "codebuild.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/AdministratorAccess"
              ]
            ]
          }
        ],
        "RoleName": "unicornstore-codebuild-user"
      },
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/UnicornStoreCodeBuild/CodeBuildRole/Resource"
      }
    },
    "UnicornStoreCodeBuildCodeBuildRoleDefaultPolicy8A3F8164": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "ec2:CreateNetworkInterfacePermission",
              "Condition": {
                "StringEquals": {
                  "ec2:Subnet": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:",
                          {
                            "Ref": "AWS::Partition"
                          },
                          ":ec2:",
                          {
                            "Ref": "AWS::Region"
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId"
                          },
                          ":subnet/",
                          {
                            "Ref": "UnicornStoreVpcPrivateSubnet1Subnet1D81DF60"
                          }
                        ]
                      ]
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:",
                          {
                            "Ref": "AWS::Partition"
                          },
                          ":ec2:",
                          {
                            "Ref": "AWS::Region"
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId"
                          },
                          ":subnet/",
                          {
                            "Ref": "UnicornStoreVpcPrivateSubnet2Subnet4710EC68"
                          }
                        ]
                      ]
                    }
                  ],
                  "ec2:AuthorizedService": "codebuild.amazonaws.com"
                }
              },
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":ec2:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":network-interface/*"
                  ]
                ]
              }
            },
            {
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":logs:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":log-group:/aws/codebuild/",
                      {
                        "Ref": "UnicornStoreCodeBuildCodeBuildProjectAF799FF7"
                      }
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":logs:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":log-group:/aws/codebuild/",
                      {
                        "Ref": "UnicornStoreCodeBuildCodeBuildProjectAF799FF7"
                      },
                      ":*"
                    ]
                  ]
                }
              ]
            },
            {
              "Action": [
                "codebuild:CreateReportGroup",
                "codebuild:CreateReport",
                "codebuild:UpdateReport",
                "codebuild:BatchPutTestCases",
                "codebuild:BatchPutCodeCoverages"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":codebuild:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":report-group/",
                    {
                      "Ref": "UnicornStoreCodeBuildCodeBuildProjectAF799FF7"
                    },
                    "-*"
                  ]
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "UnicornStoreCodeBuildCodeBuildRoleDefaultPolicy8A3F8164",
        "Roles": [
          {
            "Ref": "UnicornStoreCodeBuildCodeBuildRoleB9CE0DE7"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/UnicornStoreCodeBuild/CodeBuildRole/DefaultPolicy/Resource"
      }
    },
    "UnicornStoreCodeBuildCodeBuildProjectSecurityGroup500408F7": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Automatic generated security group for CodeBuild unicornstorestackUnicornStoreCodeBuildCodeBuildProject296CA347",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1"
          }
        ],
        "VpcId": {
          "Ref": "UnicornStoreVpc647929A5"
        }
      },
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/UnicornStoreCodeBuild/CodeBuildProject/SecurityGroup/Resource"
      }
    },
    "UnicornStoreCodeBuildCodeBuildProjectAF799FF7": {
      "Type": "AWS::CodeBuild::Project",
      "Properties": {
        "Artifacts": {
          "Type": "NO_ARTIFACTS"
        },
        "Cache": {
          "Type": "NO_CACHE"
        },
        "EncryptionKey": "alias/aws/s3",
        "Environment": {
          "ComputeType": "BUILD_GENERAL1_SMALL",
          "Image": "aws/codebuild/amazonlinux2-x86_64-standard:5.0",
          "ImagePullCredentialsType": "CODEBUILD",
          "PrivilegedMode": false,
          "Type": "LINUX_CONTAINER"
        },
        "Name": "unicornstore-codebuild",
        "ServiceRole": {
          "Fn::GetAtt": [
            "UnicornStoreCodeBuildCodeBuildRoleB9CE0DE7",
            "Arn"
          ]
        },
        "Source": {
          "BuildSpec": "version: 0.2\nenv:\n  shell: bash\nphases:\n  install:\n    commands:\n      - |\n        aws --version\n  build:\n    commands:\n      - |\n        # Resolution for when creating the first service in the account\n        aws organizations enable-all-features\n        aws sso-admin create-instance --name \"grafana-instance\" --region eu-west-1\n        aws iam create-service-linked-role --aws-service-name ecs.amazonaws.com 2>/dev/null || true\n        aws iam create-service-linked-role --aws-service-name apprunner.amazonaws.com 2>/dev/null || true\n        aws iam create-service-linked-role --aws-service-name elasticloadbalancing.amazonaws.com 2>/dev/null || true\n",
          "Type": "NO_SOURCE"
        },
        "TimeoutInMinutes": 15,
        "VpcConfig": {
          "SecurityGroupIds": [
            {
              "Fn::GetAtt": [
                "UnicornStoreCodeBuildCodeBuildProjectSecurityGroup500408F7",
                "GroupId"
              ]
            }
          ],
          "Subnets": [
            {
              "Ref": "UnicornStoreVpcPrivateSubnet1Subnet1D81DF60"
            },
            {
              "Ref": "UnicornStoreVpcPrivateSubnet2Subnet4710EC68"
            }
          ],
          "VpcId": {
            "Ref": "UnicornStoreVpc647929A5"
          }
        }
      },
      "DependsOn": [
        "UnicornStoreCodeBuildCodeBuildProjectPolicyDocument72043627"
      ],
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/UnicornStoreCodeBuild/CodeBuildProject/Resource"
      }
    },
    "UnicornStoreCodeBuildCodeBuildProjectPolicyDocument72043627": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "ec2:CreateNetworkInterface",
                "ec2:DescribeNetworkInterfaces",
                "ec2:DeleteNetworkInterface",
                "ec2:DescribeSubnets",
                "ec2:DescribeSecurityGroups",
                "ec2:DescribeDhcpOptions",
                "ec2:DescribeVpcs"
              ],
              "Effect": "Allow",
              "Resource": "*"
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "UnicornStoreCodeBuildCodeBuildProjectPolicyDocument72043627",
        "Roles": [
          {
            "Ref": "UnicornStoreCodeBuildCodeBuildRoleB9CE0DE7"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/UnicornStoreCodeBuild/CodeBuildProject/PolicyDocument/Resource"
      }
    },
    "UnicornStoreCodeBuildStartBuildFunctionServiceRole080F7EB7": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/UnicornStoreCodeBuild/StartBuildFunction/ServiceRole/Resource"
      }
    },
    "UnicornStoreCodeBuildStartBuildFunctionServiceRoleDefaultPolicy9F81C738": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "codebuild:StartBuild",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "UnicornStoreCodeBuildCodeBuildProjectAF799FF7",
                  "Arn"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "UnicornStoreCodeBuildStartBuildFunctionServiceRoleDefaultPolicy9F81C738",
        "Roles": [
          {
            "Ref": "UnicornStoreCodeBuildStartBuildFunctionServiceRole080F7EB7"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/UnicornStoreCodeBuild/StartBuildFunction/ServiceRole/DefaultPolicy/Resource"
      }
    },
    "UnicornStoreCodeBuildStartBuildFunctionB2FE9156": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "// This function is based on the cfnresponse JS module that is published\n// by CloudFormation. It's an async function that makes coding much easier.\nconst respond = async function(event, context, responseStatus, responseData, physicalResourceId, noEcho) {\n  return new Promise((resolve, reject) => {\n    var responseBody = JSON.stringify({\n        Status: responseStatus,\n        Reason: \"See the details in CloudWatch Log Stream: \" + context.logGroupName + \" \" + context.logStreamName,\n        PhysicalResourceId: physicalResourceId || context.logStreamName,\n        StackId: event.StackId,\n        RequestId: event.RequestId,\n        LogicalResourceId: event.LogicalResourceId,\n        NoEcho: noEcho || false,\n        Data: responseData\n    });\n\n    console.log(\"Response body:\\\\n\", responseBody);\n\n    var https = require(\"https\");\n    var url = require(\"url\");\n\n    var parsedUrl = url.parse(event.ResponseURL);\n    var options = {\n        hostname: parsedUrl.hostname,\n        port: 443,\n        path: parsedUrl.path,\n        method: \"PUT\",\n        headers: {\n            \"content-type\": \"\",\n            \"content-length\": responseBody.length\n        }\n    };\n\n    var request = https.request(options, function(response) {\n        console.log(\"Status code: \" + response.statusCode);\n        console.log(\"Status message: \" + response.statusMessage);\n        resolve();\n    });\n\n    request.on(\"error\", function(error) {\n        console.log(\"respond(..) failed executing https.request(..): \" + error);\n        resolve();\n    });\n\n    request.write(responseBody);\n    request.end();\n  });\n};\nconst { CodeBuildClient, StartBuildCommand } = require(\"@aws-sdk/client-codebuild\");\n\nexports.handler = async function (event, context) {\n  console.log(JSON.stringify(event, null, 4));\n  try {\n    const projectName = event.ResourceProperties.ProjectName;\n    const codeBuildIamRoleArn = event.ResourceProperties.CodeBuildIamRoleArn;\n\n    const codebuild = new CodeBuildClient();\n\n    console.log(`Starting new build of project ${projectName}`);\n\n    const { build } = await codebuild.send(new StartBuildCommand({\n      projectName,\n      // Pass CFN related parameters through the build for extraction by the\n      // completion handler.\n      environmentVariablesOverride: [\n        {\n          name: 'CFN_RESPONSE_URL',\n          value: event.ResponseURL\n        },\n        {\n          name: 'CFN_STACK_ID',\n          value: event.StackId\n        },\n        {\n          name: 'CFN_REQUEST_ID',\n          value: event.RequestId\n        },\n        {\n          name: 'CFN_LOGICAL_RESOURCE_ID',\n          value: event.LogicalResourceId\n        },\n        {\n          name: 'REQUESTED_ACTION',\n          value: event.RequestType\n        },\n        {\n          name: 'RESOURCE_CODEBUILD_ROLE_ARN',\n          value: codeBuildIamRoleArn\n        }\n      ]\n    }));\n    console.log(`Build id ${build.id} started - resource completion handled by EventBridge`);\n  } catch(error) {\n    console.error(error);\n    await respond(event, context, 'FAILED', { Error: error });\n  }\n};\n"
        },
        "FunctionName": "unicornstore-codebuild-start-lambda",
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "UnicornStoreCodeBuildStartBuildFunctionServiceRole080F7EB7",
            "Arn"
          ]
        },
        "Runtime": "nodejs22.x",
        "Timeout": 60
      },
      "DependsOn": [
        "UnicornStoreCodeBuildStartBuildFunctionServiceRoleDefaultPolicy9F81C738",
        "UnicornStoreCodeBuildStartBuildFunctionServiceRole080F7EB7"
      ],
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/UnicornStoreCodeBuild/StartBuildFunction/Resource"
      }
    },
    "UnicornStoreCodeBuildReportBuildFunctionServiceRole80B905C6": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/UnicornStoreCodeBuild/ReportBuildFunction/ServiceRole/Resource"
      }
    },
    "UnicornStoreCodeBuildReportBuildFunctionServiceRoleDefaultPolicy4D034F3B": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "codebuild:BatchGetBuilds",
                "codebuild:ListBuildsForProject"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "UnicornStoreCodeBuildCodeBuildProjectAF799FF7",
                  "Arn"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "UnicornStoreCodeBuildReportBuildFunctionServiceRoleDefaultPolicy4D034F3B",
        "Roles": [
          {
            "Ref": "UnicornStoreCodeBuildReportBuildFunctionServiceRole80B905C6"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/UnicornStoreCodeBuild/ReportBuildFunction/ServiceRole/DefaultPolicy/Resource"
      }
    },
    "UnicornStoreCodeBuildReportBuildFunction48D98BC9": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "// This function is based on the cfnresponse JS module that is published\n// by CloudFormation. It's an async function that makes coding much easier.\nconst respond = async function(event, context, responseStatus, responseData, physicalResourceId, noEcho) {\n  return new Promise((resolve, reject) => {\n    var responseBody = JSON.stringify({\n        Status: responseStatus,\n        Reason: \"See the details in CloudWatch Log Stream: \" + context.logGroupName + \" \" + context.logStreamName,\n        PhysicalResourceId: physicalResourceId || context.logStreamName,\n        StackId: event.StackId,\n        RequestId: event.RequestId,\n        LogicalResourceId: event.LogicalResourceId,\n        NoEcho: noEcho || false,\n        Data: responseData\n    });\n\n    console.log(\"Response body:\\\\n\", responseBody);\n\n    var https = require(\"https\");\n    var url = require(\"url\");\n\n    var parsedUrl = url.parse(event.ResponseURL);\n    var options = {\n        hostname: parsedUrl.hostname,\n        port: 443,\n        path: parsedUrl.path,\n        method: \"PUT\",\n        headers: {\n            \"content-type\": \"\",\n            \"content-length\": responseBody.length\n        }\n    };\n\n    var request = https.request(options, function(response) {\n        console.log(\"Status code: \" + response.statusCode);\n        console.log(\"Status message: \" + response.statusMessage);\n        resolve();\n    });\n\n    request.on(\"error\", function(error) {\n        console.log(\"respond(..) failed executing https.request(..): \" + error);\n        resolve();\n    });\n\n    request.write(responseBody);\n    request.end();\n  });\n};\nconst { CodeBuildClient, BatchGetBuildsCommand } = require(\"@aws-sdk/client-codebuild\");\n\nexports.handler = async function (event, context) {\n  console.log(JSON.stringify(event, null, 4));\n\n  const projectName = event['detail']['project-name'];\n\n  const codebuild = new CodeBuildClient();\n\n  const buildId = event['detail']['build-id'];\n  const { builds } = await codebuild.send(new BatchGetBuildsCommand({\n    ids: [ buildId ]\n  }));\n\n  console.log(JSON.stringify(builds, null, 4));\n\n  const build = builds[0];\n  // Fetch the CFN resource and response parameters from the build environment.\n  const environment = {};\n  build.environment.environmentVariables.forEach(e => environment[e.name] = e.value);\n\n  const response = {\n    ResponseURL: environment.CFN_RESPONSE_URL,\n    StackId: environment.CFN_STACK_ID,\n    LogicalResourceId: environment.CFN_LOGICAL_RESOURCE_ID,\n    RequestId: environment.CFN_REQUEST_ID\n  };\n\n  if (event['detail']['build-status'] === 'SUCCEEDED') {\n    await respond(response, context, 'SUCCESS', {}, 'build');\n  } else {\n    await respond(response, context, 'FAILED', { Error: 'Build failed' });\n  }\n};\n"
        },
        "FunctionName": "unicornstore-codebuild-report-lambda",
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "UnicornStoreCodeBuildReportBuildFunctionServiceRole80B905C6",
            "Arn"
          ]
        },
        "Runtime": "nodejs22.x",
        "Timeout": 60
      },
      "DependsOn": [
        "UnicornStoreCodeBuildReportBuildFunctionServiceRoleDefaultPolicy4D034F3B",
        "UnicornStoreCodeBuildReportBuildFunctionServiceRole80B905C6"
      ],
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/UnicornStoreCodeBuild/ReportBuildFunction/Resource"
      }
    },
    "UnicornStoreCodeBuildBuildCompleteRule7E287561": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "Description": "Build complete",
        "EventPattern": {
          "detail": {
            "build-status": [
              "SUCCEEDED",
              "FAILED",
              "STOPPED"
            ],
            "project-name": [
              {
                "Ref": "UnicornStoreCodeBuildCodeBuildProjectAF799FF7"
              }
            ]
          },
          "detail-type": [
            "CodeBuild Build State Change"
          ],
          "source": [
            "aws.codebuild"
          ]
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "UnicornStoreCodeBuildReportBuildFunction48D98BC9",
                "Arn"
              ]
            },
            "Id": "Target0"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/UnicornStoreCodeBuild/BuildCompleteRule/Resource"
      }
    },
    "UnicornStoreCodeBuildBuildCompleteRuleAllowEventRuleunicornstorestackUnicornStoreCodeBuildReportBuildFunction6189FCDE5C03542B": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "UnicornStoreCodeBuildReportBuildFunction48D98BC9",
            "Arn"
          ]
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "UnicornStoreCodeBuildBuildCompleteRule7E287561",
            "Arn"
          ]
        }
      },
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/UnicornStoreCodeBuild/BuildCompleteRule/AllowEventRuleunicornstorestackUnicornStoreCodeBuildReportBuildFunction6189FCDE"
      }
    },
    "UnicornStoreCodeBuildClusterStackE51384C4": {
      "Type": "AWS::CloudFormation::CustomResource",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "UnicornStoreCodeBuildStartBuildFunctionB2FE9156",
            "Arn"
          ]
        },
        "ProjectName": {
          "Ref": "UnicornStoreCodeBuildCodeBuildProjectAF799FF7"
        },
        "CodeBuildIamRoleArn": {
          "Fn::GetAtt": [
            "UnicornStoreCodeBuildCodeBuildRoleB9CE0DE7",
            "Arn"
          ]
        },
        "ContentHash": "cbd7908df745335e2bf14e16ba20ef21"
      },
      "DependsOn": [
        "UnicornStoreCodeBuildBuildCompleteRuleAllowEventRuleunicornstorestackUnicornStoreCodeBuildReportBuildFunction6189FCDE5C03542B",
        "UnicornStoreCodeBuildBuildCompleteRule7E287561",
        "UnicornStoreCodeBuildReportBuildFunction48D98BC9",
        "UnicornStoreCodeBuildReportBuildFunctionServiceRoleDefaultPolicy4D034F3B",
        "UnicornStoreCodeBuildReportBuildFunctionServiceRole80B905C6"
      ],
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/UnicornStoreCodeBuild/ClusterStack/Default"
      }
    },
    "CDKMetadata": {
      "Type": "AWS::CDK::Metadata",
      "Properties": {
        "Analytics": "v2:deflate64:H4sIAAAAAAAA/31UyW7bMBD9ltwZxkkPbW/11tRF0gp2kB6DETVWGEukwBkmNQj9e0Fqs9OiF817T+QsnCFv5PWnzzLMLuCNLlVxuKx0LsOOQR0EvNFTQHUjw2OjxHJvHrOlyHxeabXzuUGO2oS21jM+QF7hpE/anMgqDaytGRdHsN5k0fwAvgXGNziKzOlXYJwcbwyjMzgu6DLp2ZwZ1HONhsUOlXeaj7fO+ibl8F9hY0qHRGJjiMEo7EJNeL3J3iV9tn2ddrdCQy3D1nZVJ5vZSquU5oTuwUCJRS8MYTJn97o6izxIZxtaUdmSZLiz5VjLgFtRQZ0XIMNXb9SQ6inO0NWaKLJBXgChmFcaKC5IoBWqsr7YO2tYhpUmdjr3g49T3gpC5ZCpTjk6GXaJ90cUUWcewJXIJx0aF7z/0wqiWoYYyCrfdZOdNmUGDmpkdKmQgbSCPsiw8OrQRe1RZ6ZDP+MdiYXH3U9AhExyHo0gQzLsfE7K6Wbs9il/sI1Od6AD6TsFOqGtwAOlSpaVpz7xuVJItDbsjq1wBcmwAoYcCPvzGuiwpxv+sderxV/CiffVYhieVuArGiYZ1tEufGrviLe+n1JfxaXKybDFxpJm61IdE2sFNI3zxqCT8b41ammNQcXWCWh02V0+Ge7S7G2ReN7ozsUI50pZb1issKnscRiAE7ZjKLvHIoEtkvVOYRrOzNnfx0HpHXf4HvnZFulSJdQKZQvMva4KGTJnX1ClQD1sWzG58cS2/qfX5d78As1LawodO/4NTFH9LUfhp+fG89lAijRHsQxtylbMLqFqnkHOLr707+pVtOOR9r9PT7UV3+EVrm6u5Ux+vHghrS+dN6xrlNvO/gEiffapqwUAAA=="
      },
      "Metadata": {
        "aws:cdk:path": "unicornstore-stack/CDKMetadata/Default"
      },
      "Condition": "CDKMetadataAvailable"
    }
  },
  "Outputs": {
    "IdeUrl": {
      "Description": "Workshop IDE Url",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Fn::GetAtt": [
                "UnicornStoreIdeIdeDistribution9A9F0B03",
                "DomainName"
              ]
            }
          ]
        ]
      },
      "Export": {
        "Name": "unicornstore-ide-url"
      }
    },
    "IdePassword": {
      "Description": "Workshop IDE Password",
      "Value": {
        "Fn::GetAtt": [
          "UnicornStoreIdeIdePasswordExporter0662A4D7",
          "password"
        ]
      },
      "Export": {
        "Name": "unicornstore-ide-password"
      }
    },
    "MonitoringPrometheusInternalUrlC2CDD57B": {
      "Description": "Prometheus internal service URL (for ECS use)",
      "Value": "http://prometheus-server.monitoring.svc.cluster.local",
      "Export": {
        "Name": "PrometheusInternalUrl"
      }
    },
    "MonitoringAlarmTopicARNF201C06F": {
      "Value": {
        "Ref": "MonitoringAlarmTopicAF62D4F1"
      },
      "Export": {
        "Name": "AlarmTopicArn"
      }
    }
  },
  "Parameters": {
    "SsmParameterValueawsserviceamiamazonlinuxlatestal2023amikernel61x8664C96584B6F00A464EAD1953AFF4B05118Parameter": {
      "Type": "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>",
      "Default": "/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-x86_64"
    }
  },
  "Conditions": {
    "CDKMetadataAvailable": {
      "Fn::Or": [
        {
          "Fn::Or": [
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "af-south-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ap-east-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ap-northeast-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ap-northeast-2"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ap-northeast-3"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ap-south-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ap-south-2"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ap-southeast-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ap-southeast-2"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ap-southeast-3"
              ]
            }
          ]
        },
        {
          "Fn::Or": [
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ap-southeast-4"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ca-central-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ca-west-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "cn-north-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "cn-northwest-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "eu-central-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "eu-central-2"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "eu-north-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "eu-south-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "eu-south-2"
              ]
            }
          ]
        },
        {
          "Fn::Or": [
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "eu-west-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "eu-west-2"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "eu-west-3"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "il-central-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "me-central-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "me-south-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "sa-east-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "us-east-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "us-east-2"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "us-west-1"
              ]
            }
          ]
        },
        {
          "Fn::Equals": [
            {
              "Ref": "AWS::Region"
            },
            "us-west-2"
          ]
        }
      ]
    }
  }
}
