Metadata:
  cdk_nag:
    rules_to_suppress:
      - reason: The workshop environment does not require API-Gateway authorization
        id: AwsSolutions-APIG4
      - reason: The workshop environment does not require Cognito User Pool authorization
        id: AwsSolutions-COG4
      - reason: Workshop environment does not need a Multi-AZ setup to reduce cost
        id: AwsSolutions-RDS3
      - reason: AWS Managed policies are acceptable for the workshop
        id: AwsSolutions-IAM4
      - reason: A wildcard is acceptable for this workshop to allow parallel creation of resources
        id: AwsSolutions-IAM5
      - reason: Workshop environment is ephemeral and the database should be deleted by the end of the workshop
        id: AwsSolutions-RDS10
      - reason: Database is in a private subnet and can use the default port
        id: AwsSolutions-RDS11
      - reason: API Gateway request validation is not needed for workshop
        id: AwsSolutions-APIG2
      - reason: API Gateway access logging not needed for workshop setup
        id: AwsSolutions-APIG1
      - reason: API Gateway access logging not needed for workshop setup
        id: AwsSolutions-APIG6
      - reason: Workshop environment does not need VPC flow logs
        id: AwsSolutions-VPC7
      - reason: Ephemeral workshop environment does not need to rotate secrets
        id: AwsSolutions-SMG4
      - reason: Workshop non-sensitive test database does not need encryption at rest
        id: AwsSolutions-RDS2
      - reason: Workshop API Gateways do not need AWS WAF assigned
        id: AwsSolutions-APIG3
      - reason: Not needed
        id: AwsSolutions-EC23
      - reason: Workshop Database does not need backups
        id: AwsSolutions-RDS13
      - reason: Workshop S3 bucket does not need Access Logs
        id: AwsSolutions-S1
      - reason: Workshop environment use CDK default Lambdas
        id: AwsSolutions-L1
      - reason: Workshop environment uses user/password authentication
        id: AwsSolutions-RDS6
      - reason: Workshop instance doesn't need autoscaling
        id: AwsSolutions-EC28
      - reason: Workshop instance doesn't need autoscaling
        id: AwsSolutions-EC29
      - reason: Workshop environment should be accessible from any Geo
        id: AwsSolutions-CFR1
      - reason: Ephemeral workshop environment does not need WAF
        id: AwsSolutions-CFR2
      - reason: Ephemeral workshop environment does not need logging
        id: AwsSolutions-CFR3
      - reason: Workshop instance uses http
        id: AwsSolutions-CFR4
      - reason: Workshop instance uses http
        id: AwsSolutions-CFR5
      - reason: Workshop non-sensitive EKS cluster uses public access
        id: AwsSolutions-EKS1
      - reason: "Suppress warnings see: https://github.com/cdklabs/cdk-nag/issues/817"
        id: CdkNagValidationFailure
Resources:
  InfrastructureCoreUnicornVpc5023CF48:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: UnicornVpc
  InfrastructureCoreUnicornVpcPublicSubnet1Subnet6FFE9381:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Public
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: kubernetes.io/role/elb
          Value: "1"
        - Key: Name
          Value: UnicornStoreInfrastructure/InfrastructureCore/UnicornVpc/PublicSubnet1
      VpcId:
        Ref: InfrastructureCoreUnicornVpc5023CF48
  InfrastructureCoreUnicornVpcPublicSubnet1RouteTable97429E61:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: kubernetes.io/role/elb
          Value: "1"
        - Key: Name
          Value: UnicornStoreInfrastructure/InfrastructureCore/UnicornVpc/PublicSubnet1
      VpcId:
        Ref: InfrastructureCoreUnicornVpc5023CF48
  InfrastructureCoreUnicornVpcPublicSubnet1RouteTableAssociationB6C97E1E:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: InfrastructureCoreUnicornVpcPublicSubnet1RouteTable97429E61
      SubnetId:
        Ref: InfrastructureCoreUnicornVpcPublicSubnet1Subnet6FFE9381
  InfrastructureCoreUnicornVpcPublicSubnet1DefaultRoute8B8275E3:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InfrastructureCoreUnicornVpcIGW3160DD27
      RouteTableId:
        Ref: InfrastructureCoreUnicornVpcPublicSubnet1RouteTable97429E61
    DependsOn:
      - InfrastructureCoreUnicornVpcVPCGW5AF57791
  InfrastructureCoreUnicornVpcPublicSubnet1EIP3D53FA95:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: kubernetes.io/role/elb
          Value: "1"
        - Key: Name
          Value: UnicornStoreInfrastructure/InfrastructureCore/UnicornVpc/PublicSubnet1
  InfrastructureCoreUnicornVpcPublicSubnet1NATGatewayD1DF178E:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - InfrastructureCoreUnicornVpcPublicSubnet1EIP3D53FA95
          - AllocationId
      SubnetId:
        Ref: InfrastructureCoreUnicornVpcPublicSubnet1Subnet6FFE9381
      Tags:
        - Key: kubernetes.io/role/elb
          Value: "1"
        - Key: Name
          Value: UnicornStoreInfrastructure/InfrastructureCore/UnicornVpc/PublicSubnet1
    DependsOn:
      - InfrastructureCoreUnicornVpcPublicSubnet1DefaultRoute8B8275E3
      - InfrastructureCoreUnicornVpcPublicSubnet1RouteTableAssociationB6C97E1E
  InfrastructureCoreUnicornVpcPublicSubnet2Subnet37C522B1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Public
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: kubernetes.io/role/elb
          Value: "1"
        - Key: Name
          Value: UnicornStoreInfrastructure/InfrastructureCore/UnicornVpc/PublicSubnet2
      VpcId:
        Ref: InfrastructureCoreUnicornVpc5023CF48
  InfrastructureCoreUnicornVpcPublicSubnet2RouteTableAECCDFE8:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: kubernetes.io/role/elb
          Value: "1"
        - Key: Name
          Value: UnicornStoreInfrastructure/InfrastructureCore/UnicornVpc/PublicSubnet2
      VpcId:
        Ref: InfrastructureCoreUnicornVpc5023CF48
  InfrastructureCoreUnicornVpcPublicSubnet2RouteTableAssociation2D078C99:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: InfrastructureCoreUnicornVpcPublicSubnet2RouteTableAECCDFE8
      SubnetId:
        Ref: InfrastructureCoreUnicornVpcPublicSubnet2Subnet37C522B1
  InfrastructureCoreUnicornVpcPublicSubnet2DefaultRoute4DB37580:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InfrastructureCoreUnicornVpcIGW3160DD27
      RouteTableId:
        Ref: InfrastructureCoreUnicornVpcPublicSubnet2RouteTableAECCDFE8
    DependsOn:
      - InfrastructureCoreUnicornVpcVPCGW5AF57791
  InfrastructureCoreUnicornVpcPrivateSubnet1SubnetF5B67A45:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Private
        - Key: aws-cdk:subnet-type
          Value: Private
        - Key: kubernetes.io/role/internal-elb
          Value: "1"
        - Key: Name
          Value: UnicornStoreInfrastructure/InfrastructureCore/UnicornVpc/PrivateSubnet1
      VpcId:
        Ref: InfrastructureCoreUnicornVpc5023CF48
  InfrastructureCoreUnicornVpcPrivateSubnet1RouteTableBC4DB53D:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: kubernetes.io/role/internal-elb
          Value: "1"
        - Key: Name
          Value: UnicornStoreInfrastructure/InfrastructureCore/UnicornVpc/PrivateSubnet1
      VpcId:
        Ref: InfrastructureCoreUnicornVpc5023CF48
  InfrastructureCoreUnicornVpcPrivateSubnet1RouteTableAssociation257859F1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: InfrastructureCoreUnicornVpcPrivateSubnet1RouteTableBC4DB53D
      SubnetId:
        Ref: InfrastructureCoreUnicornVpcPrivateSubnet1SubnetF5B67A45
  InfrastructureCoreUnicornVpcPrivateSubnet1DefaultRoute36C54E21:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: InfrastructureCoreUnicornVpcPublicSubnet1NATGatewayD1DF178E
      RouteTableId:
        Ref: InfrastructureCoreUnicornVpcPrivateSubnet1RouteTableBC4DB53D
  InfrastructureCoreUnicornVpcPrivateSubnet2Subnet36418377:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      CidrBlock: 10.0.3.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Private
        - Key: aws-cdk:subnet-type
          Value: Private
        - Key: kubernetes.io/role/internal-elb
          Value: "1"
        - Key: Name
          Value: UnicornStoreInfrastructure/InfrastructureCore/UnicornVpc/PrivateSubnet2
      VpcId:
        Ref: InfrastructureCoreUnicornVpc5023CF48
  InfrastructureCoreUnicornVpcPrivateSubnet2RouteTableBB621045:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: kubernetes.io/role/internal-elb
          Value: "1"
        - Key: Name
          Value: UnicornStoreInfrastructure/InfrastructureCore/UnicornVpc/PrivateSubnet2
      VpcId:
        Ref: InfrastructureCoreUnicornVpc5023CF48
  InfrastructureCoreUnicornVpcPrivateSubnet2RouteTableAssociation0D79CF2F:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: InfrastructureCoreUnicornVpcPrivateSubnet2RouteTableBB621045
      SubnetId:
        Ref: InfrastructureCoreUnicornVpcPrivateSubnet2Subnet36418377
  InfrastructureCoreUnicornVpcPrivateSubnet2DefaultRouteFA0621A6:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: InfrastructureCoreUnicornVpcPublicSubnet1NATGatewayD1DF178E
      RouteTableId:
        Ref: InfrastructureCoreUnicornVpcPrivateSubnet2RouteTableBB621045
  InfrastructureCoreUnicornVpcIGW3160DD27:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: UnicornVpc
  InfrastructureCoreUnicornVpcVPCGW5AF57791:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId:
        Ref: InfrastructureCoreUnicornVpcIGW3160DD27
      VpcId:
        Ref: InfrastructureCoreUnicornVpc5023CF48
  InfrastructureCorepostgresB0D0C6BB:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description:
        Fn::Join:
          - ""
          - - "Generated by the CDK for stack: "
            - Ref: AWS::StackName
      GenerateSecretString:
        ExcludeCharacters: " %+~`#$&*()|[]{}:;<>?!'/@\"\\"
        GenerateStringKey: password
        PasswordLength: 30
        SecretStringTemplate: '{"username":"postgres"}'
      Name: unicornstore-db-secret
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
  InfrastructureCorepostgresAttachmentE2B30E5B:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId:
        Ref: InfrastructureCorepostgresB0D0C6BB
      TargetId:
        Ref: InfrastructureCoreUnicornStoreDatabaseF56884BA
      TargetType: AWS::RDS::DBCluster
  InfrastructureCoreDatabaseSG7319389B:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: UnicornStoreInfrastructure/InfrastructureCore/DatabaseSG
      GroupName: DatabaseSG
      SecurityGroupEgress:
        - CidrIp: 255.255.255.255/32
          Description: Disallow all traffic
          FromPort: 252
          IpProtocol: icmp
          ToPort: 86
      SecurityGroupIngress:
        - CidrIp: 10.0.0.0/16
          Description: Allow Database Traffic from local network
          FromPort: 5432
          IpProtocol: tcp
          ToPort: 5432
      VpcId:
        Ref: InfrastructureCoreUnicornVpc5023CF48
  InfrastructureCoreUnicornStoreDatabaseSubnets55C412B8:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnets for UnicornStoreDatabase database
      SubnetIds:
        - Ref: InfrastructureCoreUnicornVpcPrivateSubnet1SubnetF5B67A45
        - Ref: InfrastructureCoreUnicornVpcPrivateSubnet2Subnet36418377
  InfrastructureCoreUnicornStoreDatabaseF56884BA:
    Type: AWS::RDS::DBCluster
    Properties:
      CopyTagsToSnapshot: true
      DBClusterIdentifier: unicornstoredatabasecluster
      DBClusterParameterGroupName: default.aurora-postgresql16
      DBSubnetGroupName:
        Ref: InfrastructureCoreUnicornStoreDatabaseSubnets55C412B8
      DatabaseName: unicorns
      EnableHttpEndpoint: true
      Engine: aurora-postgresql
      EngineVersion: "16.4"
      MasterUserPassword:
        Fn::Join:
          - ""
          - - "{{resolve:secretsmanager:"
            - Ref: InfrastructureCorepostgresB0D0C6BB
            - :SecretString:password::}}
      MasterUsername:
        Fn::Join:
          - ""
          - - "{{resolve:secretsmanager:"
            - Ref: InfrastructureCorepostgresB0D0C6BB
            - :SecretString:username::}}
      Port: 5432
      ServerlessV2ScalingConfiguration:
        MaxCapacity: 4
        MinCapacity: 0.5
      VpcSecurityGroupIds:
        - Fn::GetAtt:
            - InfrastructureCoreDatabaseSG7319389B
            - GroupId
    UpdateReplacePolicy: Snapshot
    DeletionPolicy: Snapshot
  InfrastructureCoreUnicornStoreDatabaseUnicornStoreDatabaseWriter1E7762FE:
    Type: AWS::RDS::DBInstance
    Properties:
      AutoMinorVersionUpgrade: true
      DBClusterIdentifier:
        Ref: InfrastructureCoreUnicornStoreDatabaseF56884BA
      DBInstanceClass: db.serverless
      DBInstanceIdentifier: UnicornStoreDatabaseWriter
      Engine: aurora-postgresql
      PromotionTier: 0
      PubliclyAccessible: false
    DependsOn:
      - InfrastructureCoreUnicornVpcPrivateSubnet1DefaultRoute36C54E21
      - InfrastructureCoreUnicornVpcPrivateSubnet1RouteTableAssociation257859F1
      - InfrastructureCoreUnicornVpcPrivateSubnet2DefaultRouteFA0621A6
      - InfrastructureCoreUnicornVpcPrivateSubnet2RouteTableAssociation0D79CF2F
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
  InfrastructureCoreUnicornEventBusBBADDC7E:
    Type: AWS::Events::EventBus
    Properties:
      Name: unicorns
  InfrastructureCoreApplicationSecurityGroup914702B5:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: UnicornStoreInfrastructure/InfrastructureCore/ApplicationSecurityGroup
      GroupName: applicationSG
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      VpcId:
        Ref: InfrastructureCoreUnicornVpc5023CF48
  InfrastructureCoreSsmParameterDatabaseJDBCConnectionString9BD78ECF:
    Type: AWS::SSM::Parameter
    Properties:
      AllowedPattern: .*
      Description: databaseJDBCConnectionString
      Name: unicornstore-db-connection-string
      Tier: Standard
      Type: String
      Value:
        Fn::Join:
          - ""
          - - jdbc:postgresql://
            - Fn::GetAtt:
                - InfrastructureCoreUnicornStoreDatabaseF56884BA
                - Endpoint.Address
            - :5432/unicorns
  InfrastructureCoredbSecretPassword1EC1CF00:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: unicornstore-db-secret-password
      SecretString:
        Fn::Join:
          - ""
          - - "{{resolve:secretsmanager:"
            - Fn::Join:
                - "-"
                - - Fn::Select:
                      - 0
                      - Fn::Split:
                          - "-"
                          - Fn::Select:
                              - 6
                              - Fn::Split:
                                  - ":"
                                  - Ref: InfrastructureCorepostgresB0D0C6BB
                  - Fn::Select:
                      - 1
                      - Fn::Split:
                          - "-"
                          - Fn::Select:
                              - 6
                              - Fn::Split:
                                  - ":"
                                  - Ref: InfrastructureCorepostgresB0D0C6BB
                  - Fn::Select:
                      - 2
                      - Fn::Split:
                          - "-"
                          - Fn::Select:
                              - 6
                              - Fn::Split:
                                  - ":"
                                  - Ref: InfrastructureCorepostgresB0D0C6BB
            - :SecretString:password::}}
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
  UnicornDatabaseSetupDatabaseSetupFunctionServiceRoleD3279D60:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
    DependsOn:
      - InfrastructureCoreUnicornStoreDatabaseF56884BA
      - InfrastructureCoreUnicornStoreDatabaseSubnets55C412B8
      - InfrastructureCoreUnicornStoreDatabaseUnicornStoreDatabaseWriter1E7762FE
      - InfrastructureCoreUnicornVpcPrivateSubnet1DefaultRoute36C54E21
      - InfrastructureCoreUnicornVpcPrivateSubnet1RouteTableAssociation257859F1
      - InfrastructureCoreUnicornVpcPrivateSubnet2DefaultRouteFA0621A6
      - InfrastructureCoreUnicornVpcPrivateSubnet2RouteTableAssociation0D79CF2F
  UnicornDatabaseSetupDatabaseSetupFunctionServiceRoleDefaultPolicy8DC237F9:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - secretsmanager:GetSecretValue
              - secretsmanager:DescribeSecret
            Effect: Allow
            Resource:
              Ref: InfrastructureCorepostgresB0D0C6BB
          - Action:
              - rds-data:BatchExecuteStatement
              - rds-data:BeginTransaction
              - rds-data:CommitTransaction
              - rds-data:ExecuteStatement
              - rds-data:RollbackTransaction
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:"
                  - Ref: AWS::Partition
                  - ":rds:"
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - ":cluster:"
                  - Ref: InfrastructureCoreUnicornStoreDatabaseF56884BA
          - Action:
              - secretsmanager:GetSecretValue
              - secretsmanager:DescribeSecret
            Effect: Allow
            Resource:
              Ref: InfrastructureCorepostgresAttachmentE2B30E5B
        Version: "2012-10-17"
      PolicyName: UnicornDatabaseSetupDatabaseSetupFunctionServiceRoleDefaultPolicy8DC237F9
      Roles:
        - Ref: UnicornDatabaseSetupDatabaseSetupFunctionServiceRoleD3279D60
    DependsOn:
      - InfrastructureCoreUnicornStoreDatabaseF56884BA
      - InfrastructureCoreUnicornStoreDatabaseSubnets55C412B8
      - InfrastructureCoreUnicornStoreDatabaseUnicornStoreDatabaseWriter1E7762FE
      - InfrastructureCoreUnicornVpcPrivateSubnet1DefaultRoute36C54E21
      - InfrastructureCoreUnicornVpcPrivateSubnet1RouteTableAssociation257859F1
      - InfrastructureCoreUnicornVpcPrivateSubnet2DefaultRouteFA0621A6
      - InfrastructureCoreUnicornVpcPrivateSubnet2RouteTableAssociation0D79CF2F
  UnicornDatabaseSetupDatabaseSetupFunctionAA1BB8E9:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import traceback
          import cfnresponse
          import boto3
          import json

          def get_cluster_arn(cluster_id, region, account_id):
              return f"arn:aws:rds:{region}:{account_id}:cluster:{cluster_id}"

          def lambda_handler(event, context):
              print('Event: {}'.format(event))
              print('context: {}'.format(context))
              responseData = {}
              status = cfnresponse.SUCCESS

              if event['RequestType'] == 'Delete':
                  cfnresponse.send(event, context, status, responseData, 'CustomResourcePhysicalID')
              else:
                  try:
                      # Get secret name and SQL from resource properties
                      secret_name = event['ResourceProperties']['SecretName']
                      sql_statements = event['ResourceProperties']['SqlStatements']

                      # Get AWS account ID and region
                      sts = boto3.client('sts')
                      caller_identity = sts.get_caller_identity()
                      account_id = caller_identity['Account']
                      region = boto3.session.Session().region_name
                      caller_arn = caller_identity['Arn']
                      print(f"Account ID: {account_id}, Region: {region}")
                      print(f"Caller ARN: {caller_arn}")

                      # Get the secret
                      secretsmanager = boto3.client('secretsmanager')
                      secret_details = secretsmanager.describe_secret(
                          SecretId=secret_name
                      )
                      secret_arn = secret_details['ARN']
                      print(f"Secret ARN: {secret_arn}")

                      secret_response = secretsmanager.get_secret_value(
                          SecretId=secret_name
                      )

                      # Parse the secret JSON
                      secret = json.loads(secret_response['SecretString'])
                      # print(f"Secret: {secret}")

                      # Construct cluster ARN
                      cluster_arn = get_cluster_arn(
                          secret['dbClusterIdentifier'],
                          region,
                          account_id
                      )
                      print(f"Cluster ARN: {cluster_arn}")

                      # Initialize RDS Data API client
                      rds_data = boto3.client('rds-data')

                      # Execute each SQL statement
                      for sql in sql_statements.split(';'):
                          sql = sql.strip()
                          if sql:  # Skip empty statements
                              try:
                                  response = rds_data.execute_statement(
                                      resourceArn=cluster_arn,
                                      secretArn=secret_arn,
                                      database=secret['dbname'],
                                      sql=sql
                                  )
                                  print(f"Executed SQL: {sql}")
                                  print(f"Response: {response}")
                              except Exception as sql_error:
                                  print(f"Error executing SQL: {sql}")
                                  print(f"Error: {str(sql_error)}")
                                  raise sql_error

                      responseData = {'Success': 'Finished database setup.'}

                  except Exception as e:
                      status = cfnresponse.FAILED
                      tb_err = traceback.format_exc()
                      print(tb_err)
                      responseData = {'Error': tb_err}
                  finally:
                      cfnresponse.send(event, context, status, responseData, 'CustomResourcePhysicalID')
      FunctionName: unicornstore-database-setup
      Handler: index.lambda_handler
      Role:
        Fn::GetAtt:
          - UnicornDatabaseSetupDatabaseSetupFunctionServiceRoleD3279D60
          - Arn
      Runtime: python3.13
      Timeout: 180
      VpcConfig:
        SecurityGroupIds:
          - Fn::GetAtt:
              - InfrastructureCoreApplicationSecurityGroup914702B5
              - GroupId
        SubnetIds:
          - Ref: InfrastructureCoreUnicornVpcPrivateSubnet1SubnetF5B67A45
          - Ref: InfrastructureCoreUnicornVpcPrivateSubnet2Subnet36418377
    DependsOn:
      - InfrastructureCoreUnicornStoreDatabaseF56884BA
      - InfrastructureCoreUnicornStoreDatabaseSubnets55C412B8
      - InfrastructureCoreUnicornStoreDatabaseUnicornStoreDatabaseWriter1E7762FE
      - InfrastructureCoreUnicornVpcPrivateSubnet1DefaultRoute36C54E21
      - InfrastructureCoreUnicornVpcPrivateSubnet1RouteTableAssociation257859F1
      - InfrastructureCoreUnicornVpcPrivateSubnet2DefaultRouteFA0621A6
      - InfrastructureCoreUnicornVpcPrivateSubnet2RouteTableAssociation0D79CF2F
      - UnicornDatabaseSetupDatabaseSetupFunctionServiceRoleDefaultPolicy8DC237F9
      - UnicornDatabaseSetupDatabaseSetupFunctionServiceRoleD3279D60
  UnicornDatabaseSetupDatabaseSetupResource3175F5AD:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - UnicornDatabaseSetupDatabaseSetupFunctionAA1BB8E9
          - Arn
      SqlStatements: CREATE TABLE IF NOT EXISTS unicorns(id TEXT DEFAULT gen_random_uuid() PRIMARY KEY, name TEXT, age TEXT, size TEXT, type TEXT);
      SecretName:
        Fn::Join:
          - "-"
          - - Fn::Select:
                - 0
                - Fn::Split:
                    - "-"
                    - Fn::Select:
                        - 6
                        - Fn::Split:
                            - ":"
                            - Ref: InfrastructureCorepostgresB0D0C6BB
            - Fn::Select:
                - 1
                - Fn::Split:
                    - "-"
                    - Fn::Select:
                        - 6
                        - Fn::Split:
                            - ":"
                            - Ref: InfrastructureCorepostgresB0D0C6BB
            - Fn::Select:
                - 2
                - Fn::Split:
                    - "-"
                    - Fn::Select:
                        - 6
                        - Fn::Split:
                            - ":"
                            - Ref: InfrastructureCorepostgresB0D0C6BB
    DependsOn:
      - InfrastructureCoreUnicornStoreDatabaseF56884BA
      - InfrastructureCoreUnicornStoreDatabaseSubnets55C412B8
      - InfrastructureCoreUnicornStoreDatabaseUnicornStoreDatabaseWriter1E7762FE
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
  EksIdeSecurityGroupD3546F0A:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: UnicornStoreInfrastructure/EksIdeSecurityGroup
      GroupName: EKS IDE Security Group
      VpcId:
        Ref: InfrastructureCoreUnicornVpc5023CF48
  EksIdeSecurityGroupfromUnicornStoreInfrastructureEksIdeSecurityGroup56C8E4B0ALLTRAFFIC36E5D03E:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow all internal traffic
      GroupId:
        Fn::GetAtt:
          - EksIdeSecurityGroupD3546F0A
          - GroupId
      IpProtocol: "-1"
      SourceSecurityGroupId:
        Fn::GetAtt:
          - EksIdeSecurityGroupD3546F0A
          - GroupId
  EksIdeSecurityGrouptoUnicornStoreInfrastructureEksIdeSecurityGroup56C8E4B0ALLTRAFFIC64D03CB7:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: Allow all internal traffic
      DestinationSecurityGroupId:
        Fn::GetAtt:
          - EksIdeSecurityGroupD3546F0A
          - GroupId
      GroupId:
        Fn::GetAtt:
          - EksIdeSecurityGroupD3546F0A
          - GroupId
      IpProtocol: "-1"
  WorkshopIdeIdeRoleF04F5802:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/ReadOnlyAccess
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/AmazonSSMManagedInstanceCore
        - Ref: WorkshopIdeVSCodeIdeWorkshopIdeUserPolicy32D3CAA0
      RoleName: workshop-ide-user
  WorkshopIdeIdeRoleDefaultPolicy82C57657:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - WorkshopIdeVSCodeIdeIdeLogGroup4753F4D0
                - Arn
          - Action:
              - secretsmanager:GetSecretValue
              - secretsmanager:DescribeSecret
            Effect: Allow
            Resource:
              Ref: WorkshopIdeVSCodeIdeIdePasswordSecret350BFDC8
        Version: "2012-10-17"
      PolicyName: WorkshopIdeIdeRoleDefaultPolicy82C57657
      Roles:
        - Ref: WorkshopIdeIdeRoleF04F5802
  WorkshopIdeVSCodeIdeWorkshopIdeUserPolicy32D3CAA0:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: ""
      Path: /
      PolicyDocument:
        Statement:
          - Action:
              - cloudwatch:*
              - codewhisperer:*
              - ecr:*
              - eks:*
              - events:*
              - q:*
              - secretsmanager:*
              - ssm:*
              - sts:*
            Effect: Allow
            Resource: "*"
            Sid: AllowedServicesEKS
          - Action: iam:PassRole
            Effect: Allow
            Resource: !Sub arn:aws:iam::${AWS::AccountId}:role/unicorn*
            Sid: PassRoleEKS
          - Action:
              - iam:CreateRole
              - iam:TagRole
              - iam:DeleteRole
              - iam:CreatePolicy
              - iam:CreatePolicyVersion
              - iam:DeletePolicy
              - iam:DeletePolicyVersion
              - iam:AttachRolePolicy
              - iam:DetachRolePolicy
              - iam:PutRolePolicy
              - iam:DeleteRolePolicy
              - iam:PassRole
            Effect: Allow
            Resource:
              - !Sub arn:aws:iam::${AWS::AccountId}:role/*unicorn*
              - !Sub arn:aws:iam::${AWS::AccountId}:policy/*unicorn*
              - !Sub arn:aws:iam::${AWS::AccountId}:role/workshop-ide-user
              - !Sub arn:aws:iam::${AWS::AccountId}:policy/*AWSLambdaTracerAccessExecutionRole*
            Sid: IamLimitedAccessForUnicorns
          - Action:
              - cloudformation:*
              - codeartifact:*
              - apprunner:*
              - ec2:*
              - ecs:*
              - elasticloadbalancing:*
              - xray:*
              - logs:*
              - lambda:*
              - dynamodb:*
              - s3:*
              - tag:*
              - application-signals:*
            Effect: Allow
            Resource: "*"
            Sid: AllowedServicesOthers
          - Action: ec2:RunInstances
            Condition:
              StringLike:
                ec2:InstanceType:
                  - "*4xlarge"
                  - "*6xlarge"
                  - "*8xlarge"
                  - "*9xlarge"
                  - "*10xlarge"
                  - "*12xlarge"
                  - "*16xlarge"
                  - "*18xlarge"
                  - "*24xlarge"
                  - f1*
                  - x1*
                  - z1*
                  - "*metal"
            Effect: Deny
            Resource: arn:aws:ec2:*:*:instance/*
            Sid: DenyXXLInstances
          - Action:
              - ec2:ModifyReservedInstances
              - ec2:PurchaseHostReservation
              - ec2:PurchaseReservedInstancesOffering
              - ec2:PurchaseScheduledInstances
              - rds:PurchaseReservedDBInstancesOffering
              - dynamodb:PurchaseReservedCapacityOfferings
            Effect: Deny
            Resource: "*"
            Sid: DenyReservations
        Version: "2012-10-17"
  WorkshopIdeVSCodeIdeIdeLogGroup4753F4D0:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 7
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
  WorkshopIdeVSCodeIdeIdePrefixListFunctionServiceRole97BE8D6F:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  WorkshopIdeVSCodeIdeIdePrefixListFunctionServiceRoleDefaultPolicy8A712D07:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: ec2:DescribeManagedPrefixLists
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: WorkshopIdeVSCodeIdeIdePrefixListFunctionServiceRoleDefaultPolicy8A712D07
      Roles:
        - Ref: WorkshopIdeVSCodeIdeIdePrefixListFunctionServiceRole97BE8D6F
  WorkshopIdeVSCodeIdeIdePrefixListFunction9D9B95D6:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |-
          from __future__ import print_function
          import boto3
          import traceback
          import cfnresponse

          def lambda_handler(event, context):
              print('Event: {}'.format(event))
              print('context: {}'.format(context))
              responseData = {}

              status = cfnresponse.SUCCESS

              if event['RequestType'] == 'Delete':
                  responseData = {'Success': 'Custom Resource removed'}
                  cfnresponse.send(event, context, status, responseData, 'CustomResourcePhysicalID')
              else:
                  try:
                      # Open AWS clients
                      ec2 = boto3.client('ec2')

                      res = ec2.describe_managed_prefix_lists(
                         Filters=[{
                            'Name': 'prefix-list-name',
                            'Values': ['com.amazonaws.global.cloudfront.origin-facing']
                         }]
                      )

                      responseData = {'PrefixListId': str(res['PrefixLists'][0]['PrefixListId'])}
                  except Exception as e:
                      status = cfnresponse.FAILED
                      tb_err = traceback.format_exc()
                      print(tb_err)
                      responseData = {'Error': tb_err}
                  finally:
                      cfnresponse.send(event, context, status, responseData, 'CustomResourcePhysicalID')
      FunctionName: unicornstore-vscode-ide-prefix-list
      Handler: index.lambda_handler
      Role:
        Fn::GetAtt:
          - WorkshopIdeVSCodeIdeIdePrefixListFunctionServiceRole97BE8D6F
          - Arn
      Runtime: python3.13
      Timeout: 180
    DependsOn:
      - WorkshopIdeVSCodeIdeIdePrefixListFunctionServiceRoleDefaultPolicy8A712D07
      - WorkshopIdeVSCodeIdeIdePrefixListFunctionServiceRole97BE8D6F
  WorkshopIdeVSCodeIdeIdePrefixListResourceE7FFB911:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - WorkshopIdeVSCodeIdeIdePrefixListFunction9D9B95D6
          - Arn
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
  WorkshopIdeVSCodeIdeIdeSecurityGroupB3D8DAD4:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: IDE security group
      GroupName: IDE security group
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      VpcId:
        Ref: InfrastructureCoreUnicornVpc5023CF48
  WorkshopIdeVSCodeIdeIdeSecurityGroupfromIndirectPeer80C66ED590:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: HTTP from CloudFront only
      FromPort: 80
      GroupId:
        Fn::GetAtt:
          - WorkshopIdeVSCodeIdeIdeSecurityGroupB3D8DAD4
          - GroupId
      IpProtocol: tcp
      SourcePrefixListId:
        Fn::GetAtt:
          - WorkshopIdeVSCodeIdeIdePrefixListResourceE7FFB911
          - PrefixListId
      ToPort: 80
  WorkshopIdeVSCodeIdeIdeInstanceProfileD8C85F76:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName:
        Ref: WorkshopIdeIdeRoleF04F5802
      Roles:
        - Ref: WorkshopIdeIdeRoleF04F5802
  WorkshopIdeVSCodeIdeIdeEC2InstanceDAA2DFCF:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            DeleteOnTermination: true
            Encrypted: true
            VolumeSize: 50
            VolumeType: gp3
      IamInstanceProfile:
        Ref: WorkshopIdeVSCodeIdeIdeInstanceProfileD8C85F76
      ImageId:
        Ref: SsmParameterValueawsserviceamiamazonlinuxlatestal2023amikernel61x8664C96584B6F00A464EAD1953AFF4B05118Parameter
      InstanceType: m5.xlarge
      SecurityGroupIds:
        - Fn::GetAtt:
            - WorkshopIdeVSCodeIdeIdeSecurityGroupB3D8DAD4
            - GroupId
        - Fn::GetAtt:
            - WorkshopIdeVSCodeIdeAppSecurityGroup9B045FD6
            - GroupId
        - Fn::GetAtt:
            - EksIdeSecurityGroupD3546F0A
            - GroupId
      SubnetId:
        Ref: InfrastructureCoreUnicornVpcPublicSubnet1Subnet6FFE9381
      Tags:
        - Key: Name
          Value: IdeInstance
      UserData:
        Fn::Base64: "#!/bin/bash"
    DependsOn:
      - WorkshopIdeIdeRoleDefaultPolicy82C57657
      - WorkshopIdeIdeRoleF04F5802
      - WorkshopIdeVSCodeIdeIdePasswordSecret350BFDC8
  WorkshopIdeVSCodeIdeAppSecurityGroup9B045FD6:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: App security group
      GroupName: App security group
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      VpcId:
        Ref: InfrastructureCoreUnicornVpc5023CF48
  WorkshopIdeVSCodeIdeAppSecurityGroupfromIndirectPeer8080AC1CAC9D:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Port 8080 to App from CloudFront only
      FromPort: 8080
      GroupId:
        Fn::GetAtt:
          - WorkshopIdeVSCodeIdeAppSecurityGroup9B045FD6
          - GroupId
      IpProtocol: tcp
      SourcePrefixListId:
        Fn::GetAtt:
          - WorkshopIdeVSCodeIdeIdePrefixListResourceE7FFB911
          - PrefixListId
      ToPort: 8080
  WorkshopIdeVSCodeIdeIdeBootstrapWaitConditionHandle711EF348:
    Type: AWS::CloudFormation::WaitConditionHandle
  WorkshopIdeVSCodeIdeIdeBootstrapWaitCondition1F827407:
    Type: AWS::CloudFormation::WaitCondition
    Properties:
      Count: 1
      Handle:
        Ref: WorkshopIdeVSCodeIdeIdeBootstrapWaitConditionHandle711EF348
      Timeout: "1800"
    DependsOn:
      - WorkshopIdeVSCodeIdeIdeBootstrapDocumentB5B6B111
      - WorkshopIdeVSCodeIdeIdeEC2InstanceDAA2DFCF
  WorkshopIdeVSCodeIdeIdeDistributionAC426B15:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        CacheBehaviors:
          - AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
              - PUT
              - PATCH
              - POST
              - DELETE
            CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad
            Compress: true
            OriginRequestPolicyId: 216adef6-5c7f-47e4-b989-5492eafa07d3
            PathPattern: /app/*
            TargetOriginId: UnicornStoreInfrastructureWorkshopIdeVSCodeIdeIdeDistributionOrigin278F97308
            ViewerProtocolPolicy: allow-all
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
            - PUT
            - PATCH
            - POST
            - DELETE
          CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad
          Compress: true
          OriginRequestPolicyId: 216adef6-5c7f-47e4-b989-5492eafa07d3
          TargetOriginId: UnicornStoreInfrastructureWorkshopIdeVSCodeIdeIdeDistributionOrigin1095BBB6D
          ViewerProtocolPolicy: allow-all
        Enabled: true
        HttpVersion: http2
        IPV6Enabled: true
        Origins:
          - CustomOriginConfig:
              HTTPPort: 80
              OriginProtocolPolicy: http-only
              OriginSSLProtocols:
                - TLSv1.2
            DomainName:
              Fn::GetAtt:
                - WorkshopIdeVSCodeIdeIdeEC2InstanceDAA2DFCF
                - PublicDnsName
            Id: UnicornStoreInfrastructureWorkshopIdeVSCodeIdeIdeDistributionOrigin1095BBB6D
          - CustomOriginConfig:
              HTTPPort: 8080
              OriginProtocolPolicy: http-only
              OriginSSLProtocols:
                - TLSv1.2
            DomainName:
              Fn::GetAtt:
                - WorkshopIdeVSCodeIdeIdeEC2InstanceDAA2DFCF
                - PublicDnsName
            Id: UnicornStoreInfrastructureWorkshopIdeVSCodeIdeIdeDistributionOrigin278F97308
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
  WorkshopIdeVSCodeIdeIdePasswordSecret350BFDC8:
    Type: AWS::SecretsManager::Secret
    Properties:
      GenerateSecretString:
        ExcludeCharacters: '"@/\\'
        ExcludePunctuation: true
        GenerateStringKey: password
        IncludeSpace: false
        PasswordLength: 32
        SecretStringTemplate: '{"password":""}'
      Name: unicornstore-vscode-ide-password
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
  WorkshopIdeVSCodeIdeIdePasswordExporterFunctionServiceRole6FD5C912:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  WorkshopIdeVSCodeIdeIdePasswordExporterFunctionServiceRoleDefaultPolicy46000381:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - secretsmanager:GetSecretValue
              - secretsmanager:DescribeSecret
            Effect: Allow
            Resource:
              Ref: WorkshopIdeVSCodeIdeIdePasswordSecret350BFDC8
        Version: "2012-10-17"
      PolicyName: WorkshopIdeVSCodeIdeIdePasswordExporterFunctionServiceRoleDefaultPolicy46000381
      Roles:
        - Ref: WorkshopIdeVSCodeIdeIdePasswordExporterFunctionServiceRole6FD5C912
  WorkshopIdeVSCodeIdeIdePasswordExporterFunction41D54DFA:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |-
          import traceback
          import cfnresponse
          import boto3
          import json

          def lambda_handler(event, context):
              print('Event: {}'.format(event))
              print('context: {}'.format(context))
              responseData = {}

              status = cfnresponse.SUCCESS

              if event['RequestType'] == 'Delete':
                  cfnresponse.send(event, context, status, responseData, 'CustomResourcePhysicalID')
              else:
                  try:
                      passwordName = event['ResourceProperties']['PasswordName']

                      secretsmanager = boto3.client('secretsmanager')

                      response = secretsmanager.get_secret_value(
                          SecretId=passwordName,
                      )

                      responseData = json.loads(response['SecretString'])
                  except Exception as e:
                      status = cfnresponse.FAILED
                      tb_err = traceback.format_exc()
                      print(tb_err)
                      responseData = {'Error': tb_err}
                  finally:
                      cfnresponse.send(event, context, status, responseData, 'CustomResourcePhysicalID')
      FunctionName: unicornstore-vscode-ide-password
      Handler: index.lambda_handler
      Role:
        Fn::GetAtt:
          - WorkshopIdeVSCodeIdeIdePasswordExporterFunctionServiceRole6FD5C912
          - Arn
      Runtime: python3.13
      Timeout: 180
    DependsOn:
      - WorkshopIdeVSCodeIdeIdePasswordExporterFunctionServiceRoleDefaultPolicy46000381
      - WorkshopIdeVSCodeIdeIdePasswordExporterFunctionServiceRole6FD5C912
  WorkshopIdeVSCodeIdeIdePasswordExporterDF8BA4D4:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - WorkshopIdeVSCodeIdeIdePasswordExporterFunction41D54DFA
          - Arn
      PasswordName:
        Fn::Join:
          - "-"
          - - Fn::Select:
                - 0
                - Fn::Split:
                    - "-"
                    - Fn::Select:
                        - 6
                        - Fn::Split:
                            - ":"
                            - Ref: WorkshopIdeVSCodeIdeIdePasswordSecret350BFDC8
            - Fn::Select:
                - 1
                - Fn::Split:
                    - "-"
                    - Fn::Select:
                        - 6
                        - Fn::Split:
                            - ":"
                            - Ref: WorkshopIdeVSCodeIdeIdePasswordSecret350BFDC8
            - Fn::Select:
                - 2
                - Fn::Split:
                    - "-"
                    - Fn::Select:
                        - 6
                        - Fn::Split:
                            - ":"
                            - Ref: WorkshopIdeVSCodeIdeIdePasswordSecret350BFDC8
            - Fn::Select:
                - 3
                - Fn::Split:
                    - "-"
                    - Fn::Select:
                        - 6
                        - Fn::Split:
                            - ":"
                            - Ref: WorkshopIdeVSCodeIdeIdePasswordSecret350BFDC8
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
  WorkshopIdeVSCodeIdeIdeBootstrapDocumentB5B6B111:
    Type: AWS::SSM::Document
    Properties:
      Content:
        schemaVersion: "2.2"
        description: Bootstrap IDE
        parameters:
          BootstrapScript:
            default: ""
            description: (Optional) Custom bootstrap script to run.
            type: String
        mainSteps:
          - inputs:
              runCommand:
                - Fn::Sub:
                    - |-
                      bash << 'HEREDOC'
                      set -e

                      echo "Retrieving IDE password..."

                      PASSWORD_SECRET_VALUE=$(aws secretsmanager get-secret-value --secret-id "${passwordName}" --query 'SecretString' --output text)

                      export IDE_PASSWORD=$(echo "$PASSWORD_SECRET_VALUE" | jq -r '.password')

                      echo "Setting profile variables..."

                      # Set some useful variables
                      export TOKEN=$(curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600")
                      export AWS_REGION=$(curl -H "X-aws-ec2-metadata-token: $TOKEN" -s http://169.254.169.254/latest/dynamic/instance-identity/document | grep region | awk -F\" '{print $4}')
                      export EC2_PRIVATE_IP=$(curl -H "X-aws-ec2-metadata-token: $TOKEN" -s http://169.254.169.254/latest/meta-data/local-ipv4)

                      tee /etc/profile.d/workshop.sh <<EOF
                      export INSTANCE_IAM_ROLE_NAME="${instanceIamRoleName}"
                      export INSTANCE_IAM_ROLE_ARN="${instanceIamRoleArn}"

                      export AWS_REGION="$AWS_REGION"
                      export AWS_DEFAULT_REGION="$AWS_REGION"
                      export EC2_PRIVATE_IP="$EC2_PRIVATE_IP"

                      export IDE_DOMAIN="${domain}"
                      export IDE_URL="https://${domain}"
                      export IDE_PASSWORD="$IDE_PASSWORD"

                      alias code="code-server"
                      EOF

                      source /etc/profile.d/workshop.sh

                      echo "Setting PS1..."

                      # Set PS1
                      tee /etc/profile.d/custom_prompt.sh <<EOF
                      #!/bin/sh

                      export PROMPT_COMMAND='export PS1="\u:\w:$ "'
                      EOF

                      echo "Generating SSH key..."

                      # Generate an SSH key for ec2-user
                      sudo -u ec2-user bash -c "ssh-keygen -t rsa -N '' -f ~/.ssh/id_rsa -m pem <<< y"

                      echo "Installing AWS CLI..."

                      # Install AWS CLI
                      curl -LSsf -o /tmp/aws-cli.zip https://awscli.amazonaws.com/awscli-exe-linux-$(uname -m).zip
                      unzip -q -d /tmp /tmp/aws-cli.zip
                      /tmp/aws/install --update
                      rm -rf /tmp/aws*

                      echo "export ACCOUNT_ID=$(aws sts get-caller-identity --output text --query Account)" | sudo tee -a /etc/profile.d/workshop.sh
                      source /etc/profile.d/workshop.sh

                      echo "Installing Docker..."

                      # Install docker and base package
                      dnf install -y -q docker git >/dev/null
                      service docker start
                      usermod -aG docker ec2-user

                      echo "Installing code-server..."

                      # Install code-server
                      codeServer=$(dnf list installed code-server | wc -l)
                      if [ "$codeServer" -eq "0" ]; then
                        sudo -u ec2-user "codeServerVersion=${codeServerVersion}" bash -c 'curl -fsSL https://code-server.dev/install.sh | sh -s -- --version ${codeServerVersion}'
                        systemctl enable --now code-server@ec2-user
                      fi

                      sudo -u ec2-user bash -c 'mkdir -p ~/.config/code-server'
                      sudo -u ec2-user bash -c 'touch ~/.config/code-server/config.yaml'
                      tee /home/ec2-user/.config/code-server/config.yaml <<EOF
                      cert: false
                      auth: password
                      password: "$IDE_PASSWORD"
                      bind-addr: 127.0.0.1:8889
                      EOF

                      # Create default directory for workspace
                      sudo -u ec2-user bash -c 'mkdir -p ~/environment'

                      ENVIRONMENT_CONTENTS_ZIP=${environmentContentsZip}

                      if [ ! -z "$ENVIRONMENT_CONTENTS_ZIP" ]; then
                        echo "Adding environments archive..."

                        if [[ $ENVIRONMENT_CONTENTS_ZIP == s3:* ]]; then
                          aws s3 cp $ENVIRONMENT_CONTENTS_ZIP /tmp/environment.zip
                        else
                          curl -LSsf -o /tmp/environment.zip $ENVIRONMENT_CONTENTS_ZIP
                        fi

                        sudo -u ec2-user bash -c 'unzip -q /tmp/environment.zip -d ~/environment'

                        rm -rf /tmp/environment.zip
                      fi

                      STARTUP_EDITOR='none'

                      TERMINAL_ON_STARTUP="${terminalOnStartup}"
                      README_URL="${readmeUrl}"

                      if [ ! -z "$README_URL" ]; then
                        echo "Adding README..."
                        if [[ $README_URL == s3:* ]]; then
                          aws s3 cp $README_URL /home/ec2-user/environment/README.md
                        else
                          curl -LSsf -o /home/ec2-user/environment/README.md $README_URL
                        fi
                      fi

                      if [ "$TERMINAL_ON_STARTUP" = "true" ]; then
                        STARTUP_EDITOR='terminal'
                      elif [ -f /home/ec2-user/environment/README.md ]; then
                        STARTUP_EDITOR='readme'
                      fi

                      echo "Configuring code-server..."

                      sudo -u ec2-user bash -c 'mkdir -p ~/.local/share/code-server/User'
                      sudo -u ec2-user bash -c 'touch ~/.local/share/code-server/User/settings.json'
                      tee /home/ec2-user/.local/share/code-server/User/settings.json <<EOF
                      {
                        "extensions.autoUpdate": false,
                        "extensions.autoCheckUpdates": false,
                        "security.workspace.trust.enabled": false,
                        "workbench.startupEditor": "$STARTUP_EDITOR",
                        "task.allowAutomaticTasks": "on",
                        "telemetry.telemetryLevel": "off",
                        "update.mode": "none"
                      }
                      EOF

                      sudo -u ec2-user bash -c 'touch ~/.local/share/code-server/User/keybindings.json'
                      tee /home/ec2-user/.local/share/code-server/User/keybindings.json << 'EOF'
                      [
                        {
                          "key": "shift+cmd+/",
                          "command": "remote.tunnel.forwardCommandPalette"
                        }
                      ]
                      EOF

                      if [ ! -z "${splashUrl}" ]; then
                      echo "Configuring splash URL..."

                      sudo -u ec2-user bash -c 'touch ~/.local/share/code-server/User/tasks.json'
                      tee /home/ec2-user/.local/share/code-server/User/tasks.json << 'EOF'
                      {
                        "version": "2.0.0",
                        "tasks": [
                          {
                            "label": "Open Splash",
                            "command": "${!input:openSimpleBrowser}",
                            "presentation": {
                              "reveal": "always",
                              "panel": "new"
                            },
                            "runOptions": {
                              "runOn": "folderOpen"
                            }
                          }
                        ],
                        "inputs": [
                          {
                            "id": "openSimpleBrowser",
                            "type": "command",
                            "command": "simpleBrowser.show",
                            "args": [
                              "${splashUrl}"
                            ]
                          }
                        ]
                      }
                      EOF
                      fi

                      echo "Installing code-server extensions..."

                      EXTENSIONS="${extensions}"

                      IFS=',' read -ra array <<< "$EXTENSIONS"

                      # Iterate over each entry in the array
                      for extension in "${!array[@]}"; do
                        # Use retries as extension installation seems unreliable
                        sudo -u ec2-user bash -c "set -e; (r=5;while ! code-server --install-extension $extension --force ; do ((--r))||exit;sleep 5;done)"
                      done

                      if [ ! -f "/home/ec2-user/.local/share/code-server/coder.json" ]; then
                        sudo -u ec2-user bash -c 'touch ~/.local/share/code-server/coder.json'
                        echo '{ "query": { "folder": "/home/ec2-user/environment" } }' > /home/ec2-user/.local/share/code-server/coder.json
                      fi

                      echo "Restarting code-server..."

                      systemctl restart code-server@ec2-user

                      echo "Installing Caddy..."

                      # Install caddy
                      dnf copr enable -y -q @caddy/caddy epel-9-x86_64
                      dnf install -y -q caddy
                      systemctl enable --now caddy

                      tee /etc/caddy/Caddyfile <<EOF
                      :80 {
                        handle /* {
                          reverse_proxy 127.0.0.1:8889
                        }
                        #GITEA
                      }
                      EOF

                      echo "Restarting caddy..."

                      systemctl restart caddy

                      if [ ! -f "/home/ec2-user/.local/share/code-server/coder.json" ]; then
                        sudo -u ec2-user bash -c 'touch ~/.local/share/code-server/coder.json'
                        echo '{ "query": { "folder": "/home/ec2-user/environment" } }' > /home/ec2-user/.local/share/code-server/coder.json
                      fi

                      ${installGitea}

                      echo "Running custom bootstrap script..."

                      ${customBootstrapScript}
                      HEREDOC

                      exit_code=$?

                      /opt/aws/bin/cfn-signal -e $exit_code '${waitConditionHandleUrl}'

                      exit $exit_code
                    - splashUrl: ""
                      instanceIamRoleArn:
                        Fn::GetAtt:
                          - WorkshopIdeIdeRoleF04F5802
                          - Arn
                      readmeUrl: ""
                      waitConditionHandleUrl:
                        Ref: WorkshopIdeVSCodeIdeIdeBootstrapWaitConditionHandle711EF348
                      extensions: ms-azuretools.vscode-docker,ms-kubernetes-tools.vscode-kubernetes-tools,vscjava.vscode-java-pack
                      domain: ""
                      installGitea: echo bootstrapGitea was not provided
                      terminalOnStartup: "true"
                      environmentContentsZip: ""
                      passwordName:
                        Fn::Join:
                          - "-"
                          - - Fn::Select:
                                - 0
                                - Fn::Split:
                                    - "-"
                                    - Fn::Select:
                                        - 6
                                        - Fn::Split:
                                            - ":"
                                            - Ref: WorkshopIdeVSCodeIdeIdePasswordSecret350BFDC8
                            - Fn::Select:
                                - 1
                                - Fn::Split:
                                    - "-"
                                    - Fn::Select:
                                        - 6
                                        - Fn::Split:
                                            - ":"
                                            - Ref: WorkshopIdeVSCodeIdeIdePasswordSecret350BFDC8
                            - Fn::Select:
                                - 2
                                - Fn::Split:
                                    - "-"
                                    - Fn::Select:
                                        - 6
                                        - Fn::Split:
                                            - ":"
                                            - Ref: WorkshopIdeVSCodeIdeIdePasswordSecret350BFDC8
                            - Fn::Select:
                                - 3
                                - Fn::Split:
                                    - "-"
                                    - Fn::Select:
                                        - 6
                                        - Fn::Split:
                                            - ":"
                                            - Ref: WorkshopIdeVSCodeIdeIdePasswordSecret350BFDC8
                      customBootstrapScript: |
                        date

                        echo '=== Clone Git repository ==='
                        sudo -H -u ec2-user bash -c "git clone https://github.com/aws-samples/java-on-aws ~/java-on-aws/"
                        sudo -H -u ec2-user bash -c "cd ~/java-on-aws && git checkout refactoring"

                        echo '=== Setup IDE ==='
                        sudo -H -i -u ec2-user bash -c "~/java-on-aws/infrastructure/scripts/setup-ide.sh"

                        echo '=== Additional Setup ==='
                        sudo -H -i -u ec2-user bash -c "~/java-on-aws/infrastructure/scripts/ws-app-setup.sh"
                        # sudo -H -i -u ec2-user bash -c "~/java-on-aws/infrastructure/scripts/ws-eks-setup.sh"
                        # sudo -H -i -u ec2-user bash -c "~/java-on-aws/infrastructure/scripts/ws-containerize.sh"
                        # sudo -H -i -u ec2-user bash -c "~/java-on-aws/infrastructure/scripts/ws-eks-deploy-app.sh"
                        # sudo -H -i -u ec2-user bash -c "~/java-on-aws/infrastructure/scripts/ws-eks-cleanup-app.sh"
                      codeServerVersion: 4.96.2
                      instanceIamRoleName:
                        Ref: WorkshopIdeIdeRoleF04F5802
            name: IdeBootstrapFunction
            action: aws:runShellScript
      DocumentFormat: YAML
      DocumentType: Command
      UpdateMethod: NewVersion
  WorkshopIdeVSCodeIdeIdeBootstrapFunctionServiceRole510C1172:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  WorkshopIdeVSCodeIdeIdeBootstrapFunctionServiceRoleDefaultPolicy8914600D:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: iam:PassRole
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - WorkshopIdeIdeRoleF04F5802
                - Arn
          - Action:
              - ec2:DescribeInstances
              - iam:ListInstanceProfiles
              - ssm:DescribeInstanceInformation
              - ssm:SendCommand
              - ssm:GetCommandInvocation
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: WorkshopIdeVSCodeIdeIdeBootstrapFunctionServiceRoleDefaultPolicy8914600D
      Roles:
        - Ref: WorkshopIdeVSCodeIdeIdeBootstrapFunctionServiceRole510C1172
  WorkshopIdeVSCodeIdeIdeBootstrapFunction6BAF9173:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |-
          from __future__ import print_function
          import boto3
          import json
          import os
          import time
          import traceback
          import cfnresponse
          from botocore.exceptions import WaiterError

          def lambda_handler(event, context):
              print('Event: {}'.format(event))
              print('context: {}'.format(context))
              responseData = {}

              status = cfnresponse.SUCCESS

              if event['RequestType'] == 'Delete':
                  responseData = {'Success': 'Custom Resource removed'}
                  cfnresponse.send(event, context, status, responseData, 'CustomResourcePhysicalID')
              else:
                  try:
                      # Open AWS clients
                      ec2 = boto3.client('ec2')
                      ssm = boto3.client('ssm')

                      instance_id = event['ResourceProperties']['InstanceId']

                      print('Waiting for the instance to be ready...')
                      # Wait for Instance to become ready
                      instance_state = 'unknown'
                      print('Instance is currently in state'.format(instance_state))
                      while instance_state != 'running':
                          time.sleep(5)
                          di = ec2.describe_instances(InstanceIds=[instance_id])
                          instance_state = di['Reservations'][0]['Instances'][0]['State']['Name']
                          print('Waiting for instance in state: {}'.format(instance_state))

                      print('Instance is ready')

                      print('Waiting for instance to come online in SSM...')
                      for i in range(1, 60):
                        response = ssm.describe_instance_information(Filters=[{'Key': 'InstanceIds', 'Values': [instance_id]}])
                        if len(response["InstanceInformationList"]) == 0:
                          print('No instances in SSM')
                        elif len(response["InstanceInformationList"]) > 0 and \
                              response["InstanceInformationList"][0]["PingStatus"] == "Online" and \
                              response["InstanceInformationList"][0]["InstanceId"] == instance_id:
                          print('Instance is online in SSM')
                          break
                        time.sleep(10)

                      ssm_document = event['ResourceProperties']['SsmDocument']

                      ssm.send_command(
                          InstanceIds=[instance_id],
                          DocumentName=ssm_document,
                          CloudWatchOutputConfig={
                              'CloudWatchLogGroupName': event['ResourceProperties']['LogGroupName'],
                              'CloudWatchOutputEnabled': True
                          })

                      responseData = {'Success': 'Started bootstrapping for instance: '+instance_id}
                  except Exception as e:
                      status = cfnresponse.FAILED
                      tb_err = traceback.format_exc()
                      print(tb_err)
                      responseData = {'Error': tb_err}
                  finally:
                      cfnresponse.send(event, context, status, responseData, 'CustomResourcePhysicalID')
      FunctionName: unicornstore-vscode-ide-bootstrap
      Handler: index.lambda_handler
      Role:
        Fn::GetAtt:
          - WorkshopIdeVSCodeIdeIdeBootstrapFunctionServiceRole510C1172
          - Arn
      Runtime: python3.13
      Timeout: 900
    DependsOn:
      - WorkshopIdeVSCodeIdeIdeBootstrapFunctionServiceRoleDefaultPolicy8914600D
      - WorkshopIdeVSCodeIdeIdeBootstrapFunctionServiceRole510C1172
  WorkshopIdeVSCodeIdeIdeBootstrapResourceD3E7B65C:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - WorkshopIdeVSCodeIdeIdeBootstrapFunction6BAF9173
          - Arn
      InstanceId:
        Ref: WorkshopIdeVSCodeIdeIdeEC2InstanceDAA2DFCF
      LogGroupName:
        Ref: WorkshopIdeVSCodeIdeIdeLogGroup4753F4D0
      SsmDocument:
        Ref: WorkshopIdeVSCodeIdeIdeBootstrapDocumentB5B6B111
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
  UnicornStoreLambdaUnicornStoreSpringFunctionServiceRole8C031111:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
    DependsOn:
      - InfrastructureCoreUnicornVpcPrivateSubnet1DefaultRoute36C54E21
      - InfrastructureCoreUnicornVpcPrivateSubnet1RouteTableAssociation257859F1
      - InfrastructureCoreUnicornVpcPrivateSubnet2DefaultRouteFA0621A6
      - InfrastructureCoreUnicornVpcPrivateSubnet2RouteTableAssociation0D79CF2F
  UnicornStoreLambdaUnicornStoreSpringFunctionServiceRoleDefaultPolicy85B48535:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: events:PutEvents
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - InfrastructureCoreUnicornEventBusBBADDC7E
                - Arn
        Version: "2012-10-17"
      PolicyName: UnicornStoreLambdaUnicornStoreSpringFunctionServiceRoleDefaultPolicy85B48535
      Roles:
        - Ref: UnicornStoreLambdaUnicornStoreSpringFunctionServiceRole8C031111
    DependsOn:
      - InfrastructureCoreUnicornVpcPrivateSubnet1DefaultRoute36C54E21
      - InfrastructureCoreUnicornVpcPrivateSubnet1RouteTableAssociation257859F1
      - InfrastructureCoreUnicornVpcPrivateSubnet2DefaultRouteFA0621A6
      - InfrastructureCoreUnicornVpcPrivateSubnet2RouteTableAssociation0D79CF2F
  UnicornStoreLambdaUnicornStoreSpringFunction3147CB7E:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |-
          def handler(event, context):
              return 'placeholder'
      Environment:
        Variables:
          SPRING_DATASOURCE_PASSWORD:
            Fn::Join:
              - ""
              - - "{{resolve:secretsmanager:"
                - Ref: InfrastructureCorepostgresB0D0C6BB
                - :SecretString:password::}}
          JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
          AWS_SERVERLESS_JAVA_CONTAINER_INIT_GRACE_TIME: "500"
          SPRING_DATASOURCE_HIKARI_maximumPoolSize: "1"
          SPRING_DATASOURCE_URL:
            Fn::Join:
              - ""
              - - jdbc:postgresql://
                - Fn::GetAtt:
                    - InfrastructureCoreUnicornStoreDatabaseF56884BA
                    - Endpoint.Address
                - :5432/unicorns
      FunctionName: unicorn-store-spring
      Handler: com.unicorn.store.StreamLambdaHandler::handleRequest
      MemorySize: 2048
      Role:
        Fn::GetAtt:
          - UnicornStoreLambdaUnicornStoreSpringFunctionServiceRole8C031111
          - Arn
      Runtime: python3.13
      Timeout: 29
      VpcConfig:
        SecurityGroupIds:
          - Fn::GetAtt:
              - InfrastructureCoreApplicationSecurityGroup914702B5
              - GroupId
        SubnetIds:
          - Ref: InfrastructureCoreUnicornVpcPrivateSubnet1SubnetF5B67A45
          - Ref: InfrastructureCoreUnicornVpcPrivateSubnet2Subnet36418377
    DependsOn:
      - InfrastructureCoreUnicornVpcPrivateSubnet1DefaultRoute36C54E21
      - InfrastructureCoreUnicornVpcPrivateSubnet1RouteTableAssociation257859F1
      - InfrastructureCoreUnicornVpcPrivateSubnet2DefaultRouteFA0621A6
      - InfrastructureCoreUnicornVpcPrivateSubnet2RouteTableAssociation0D79CF2F
      - UnicornStoreLambdaUnicornStoreSpringFunctionServiceRoleDefaultPolicy85B48535
      - UnicornStoreLambdaUnicornStoreSpringFunctionServiceRole8C031111
  UnicornStoreLambdaUnicornStoreSpringLambdaAlias203DCA53:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName:
        Ref: UnicornStoreLambdaUnicornStoreSpringFunction3147CB7E
      FunctionVersion: $LATEST
      Name: unicorn-alias
  UnicornStoreLambdaUnicornStoreSpringApiD07C51D0:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: UnicornStoreSpringApi
  UnicornStoreLambdaUnicornStoreSpringApiCloudWatchRoleEC16D5E1:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
  UnicornStoreLambdaUnicornStoreSpringApiAccountB0BAA370:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn:
        Fn::GetAtt:
          - UnicornStoreLambdaUnicornStoreSpringApiCloudWatchRoleEC16D5E1
          - Arn
    DependsOn:
      - UnicornStoreLambdaUnicornStoreSpringApiD07C51D0
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
  UnicornStoreLambdaUnicornStoreSpringApiDeployment0903DCB2d4054b357de274baf8aeaeab0566cbb1:
    Type: AWS::ApiGateway::Deployment
    Properties:
      Description: Automatically created by the RestApi construct
      RestApiId:
        Ref: UnicornStoreLambdaUnicornStoreSpringApiD07C51D0
    DependsOn:
      - UnicornStoreLambdaUnicornStoreSpringApiproxyANYD8755A43
      - UnicornStoreLambdaUnicornStoreSpringApiproxyBC523EEC
      - UnicornStoreLambdaUnicornStoreSpringApiANY0EA8FD6D
  UnicornStoreLambdaUnicornStoreSpringApiDeploymentStageprodB72B0A46:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId:
        Ref: UnicornStoreLambdaUnicornStoreSpringApiDeployment0903DCB2d4054b357de274baf8aeaeab0566cbb1
      RestApiId:
        Ref: UnicornStoreLambdaUnicornStoreSpringApiD07C51D0
      StageName: prod
    DependsOn:
      - UnicornStoreLambdaUnicornStoreSpringApiAccountB0BAA370
  UnicornStoreLambdaUnicornStoreSpringApiproxyBC523EEC:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Fn::GetAtt:
          - UnicornStoreLambdaUnicornStoreSpringApiD07C51D0
          - RootResourceId
      PathPart: "{proxy+}"
      RestApiId:
        Ref: UnicornStoreLambdaUnicornStoreSpringApiD07C51D0
  UnicornStoreLambdaUnicornStoreSpringApiproxyANYApiPermissionUnicornStoreInfrastructureUnicornStoreLambdaUnicornStoreSpringApi9AFF1EE0ANYproxy5DAAE13A:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: UnicornStoreLambdaUnicornStoreSpringLambdaAlias203DCA53
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: UnicornStoreLambdaUnicornStoreSpringApiD07C51D0
            - /
            - Ref: UnicornStoreLambdaUnicornStoreSpringApiDeploymentStageprodB72B0A46
            - /*/*
  UnicornStoreLambdaUnicornStoreSpringApiproxyANYApiPermissionTestUnicornStoreInfrastructureUnicornStoreLambdaUnicornStoreSpringApi9AFF1EE0ANYproxyE84AD9FF:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: UnicornStoreLambdaUnicornStoreSpringLambdaAlias203DCA53
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: UnicornStoreLambdaUnicornStoreSpringApiD07C51D0
            - /test-invoke-stage/*/*
  UnicornStoreLambdaUnicornStoreSpringApiproxyANYD8755A43:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: ANY
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - ":apigateway:"
              - Ref: AWS::Region
              - :lambda:path/2015-03-31/functions/
              - Ref: UnicornStoreLambdaUnicornStoreSpringLambdaAlias203DCA53
              - /invocations
      ResourceId:
        Ref: UnicornStoreLambdaUnicornStoreSpringApiproxyBC523EEC
      RestApiId:
        Ref: UnicornStoreLambdaUnicornStoreSpringApiD07C51D0
  UnicornStoreLambdaUnicornStoreSpringApiANYApiPermissionUnicornStoreInfrastructureUnicornStoreLambdaUnicornStoreSpringApi9AFF1EE0ANY50D4CC3D:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: UnicornStoreLambdaUnicornStoreSpringLambdaAlias203DCA53
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: UnicornStoreLambdaUnicornStoreSpringApiD07C51D0
            - /
            - Ref: UnicornStoreLambdaUnicornStoreSpringApiDeploymentStageprodB72B0A46
            - /*/
  UnicornStoreLambdaUnicornStoreSpringApiANYApiPermissionTestUnicornStoreInfrastructureUnicornStoreLambdaUnicornStoreSpringApi9AFF1EE0ANYE6339C6F:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: UnicornStoreLambdaUnicornStoreSpringLambdaAlias203DCA53
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: UnicornStoreLambdaUnicornStoreSpringApiD07C51D0
            - /test-invoke-stage/*/
  UnicornStoreLambdaUnicornStoreSpringApiANY0EA8FD6D:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: ANY
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - ":apigateway:"
              - Ref: AWS::Region
              - :lambda:path/2015-03-31/functions/
              - Ref: UnicornStoreLambdaUnicornStoreSpringLambdaAlias203DCA53
              - /invocations
      ResourceId:
        Fn::GetAtt:
          - UnicornStoreLambdaUnicornStoreSpringApiD07C51D0
          - RootResourceId
      RestApiId:
        Ref: UnicornStoreLambdaUnicornStoreSpringApiD07C51D0
  UnicornStoreLambdaLambdaCodeBucketA83F0BD9:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
  UnicornStoreLambdaLambdaCodeBucketPolicyD594EB4E:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: UnicornStoreLambdaLambdaCodeBucketA83F0BD9
      PolicyDocument:
        Statement:
          - Action: s3:*
            Condition:
              Bool:
                aws:SecureTransport: "false"
            Effect: Deny
            Principal:
              AWS: "*"
            Resource:
              - Fn::GetAtt:
                  - UnicornStoreLambdaLambdaCodeBucketA83F0BD9
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - UnicornStoreLambdaLambdaCodeBucketA83F0BD9
                        - Arn
                    - /*
        Version: "2012-10-17"
  UnicornStoreLambdaSsmParameterUnicornStoreSpringBucketNameC34E2ED9:
    Type: AWS::SSM::Parameter
    Properties:
      AllowedPattern: .*
      Description: UnicornStoreSpringBucketName
      Name: unicorn-store-spring-bucket-name
      Tier: Standard
      Type: String
      Value:
        Ref: UnicornStoreLambdaLambdaCodeBucketA83F0BD9
  InfrastructureImmDayUnicornStoreEcr02A1D1CB:
    Type: AWS::ECR::Repository
    Properties:
      EmptyOnDelete: true
      ImageScanningConfiguration:
        ScanOnPush: false
      RepositoryName: unicorn-store-spring
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
  InfrastructureImmDayUnicornStoreApprunnerRoleDE5DC685:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: tasks.apprunner.amazonaws.com
        Version: "2012-10-17"
      RoleName: unicornstore-apprunner-role
  InfrastructureImmDayUnicornStoreApprunnerRoleDefaultPolicy739B247E:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: xray:PutTraceSegments
            Effect: Allow
            Resource: "*"
          - Action: events:PutEvents
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - InfrastructureCoreUnicornEventBusBBADDC7E
                - Arn
          - Action:
              - secretsmanager:GetSecretValue
              - secretsmanager:DescribeSecret
            Effect: Allow
            Resource:
              Ref: InfrastructureCorepostgresB0D0C6BB
          - Action:
              - secretsmanager:GetSecretValue
              - secretsmanager:DescribeSecret
            Effect: Allow
            Resource:
              Ref: InfrastructureCoredbSecretPassword1EC1CF00
          - Action:
              - ssm:DescribeParameters
              - ssm:GetParameters
              - ssm:GetParameter
              - ssm:GetParameterHistory
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:"
                  - Ref: AWS::Partition
                  - ":ssm:"
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - :parameter/
                  - Ref: InfrastructureCoreSsmParameterDatabaseJDBCConnectionString9BD78ECF
        Version: "2012-10-17"
      PolicyName: InfrastructureImmDayUnicornStoreApprunnerRoleDefaultPolicy739B247E
      Roles:
        - Ref: InfrastructureImmDayUnicornStoreApprunnerRoleDE5DC685
  InfrastructureImmDayUnicornStoreApprunnerEcrAccessRole88E0E1C6:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: build.apprunner.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSAppRunnerServicePolicyForECRAccess
      RoleName: unicornstore-apprunner-ecr-access-role
  InfrastructureImmDayUnicornStoreVpcConnectorSecurityGroup9812B941:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: UnicornStoreInfrastructure/InfrastructureImmDay/UnicornStoreVpcConnector/SecurityGroup
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      VpcId:
        Ref: InfrastructureCoreUnicornVpc5023CF48
  InfrastructureImmDayUnicornStoreVpcConnectorAAB91D90:
    Type: AWS::AppRunner::VpcConnector
    Properties:
      SecurityGroups:
        - Fn::GetAtt:
            - InfrastructureImmDayUnicornStoreVpcConnectorSecurityGroup9812B941
            - GroupId
      Subnets:
        - Ref: InfrastructureCoreUnicornVpcPrivateSubnet1SubnetF5B67A45
        - Ref: InfrastructureCoreUnicornVpcPrivateSubnet2Subnet36418377
      VpcConnectorName: unicornstore-vpc-connector
  InfrastructureImmDayUnicornStoreEcsTaskRole507FE17B:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
        - arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess
      RoleName: unicornstore-ecs-task-role
  InfrastructureImmDayUnicornStoreEcsTaskRoleDefaultPolicy9B885245:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: xray:PutTraceSegments
            Effect: Allow
            Resource: "*"
          - Action:
              - logs:PutLogEvents
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:DescribeLogStreams
              - logs:DescribeLogGroups
              - logs:PutRetentionPolicy
              - xray:PutTraceSegments
              - xray:PutTelemetryRecords
              - xray:GetSamplingRules
              - xray:GetSamplingTargets
              - xray:GetSamplingStatisticSummaries
              - cloudwatch:PutMetricData
              - ssm:GetParameters
            Effect: Allow
            Resource: "*"
          - Action: events:PutEvents
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - InfrastructureCoreUnicornEventBusBBADDC7E
                - Arn
          - Action:
              - secretsmanager:GetSecretValue
              - secretsmanager:DescribeSecret
            Effect: Allow
            Resource:
              Ref: InfrastructureCorepostgresB0D0C6BB
          - Action:
              - secretsmanager:GetSecretValue
              - secretsmanager:DescribeSecret
            Effect: Allow
            Resource:
              Ref: InfrastructureCoredbSecretPassword1EC1CF00
          - Action:
              - ssm:DescribeParameters
              - ssm:GetParameters
              - ssm:GetParameter
              - ssm:GetParameterHistory
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:"
                  - Ref: AWS::Partition
                  - ":ssm:"
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - :parameter/
                  - Ref: InfrastructureCoreSsmParameterDatabaseJDBCConnectionString9BD78ECF
        Version: "2012-10-17"
      PolicyName: InfrastructureImmDayUnicornStoreEcsTaskRoleDefaultPolicy9B885245
      Roles:
        - Ref: InfrastructureImmDayUnicornStoreEcsTaskRole507FE17B
  InfrastructureImmDayUnicornStoreEcsTaskExecutionRoleC06D6960:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
        - arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess
      RoleName: unicornstore-ecs-task-execution-role
  InfrastructureImmDayUnicornStoreEcsTaskExecutionRoleDefaultPolicy4677B055:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: logs:CreateLogGroup
            Effect: Allow
            Resource: "*"
          - Action:
              - logs:PutLogEvents
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:DescribeLogStreams
              - logs:DescribeLogGroups
              - logs:PutRetentionPolicy
              - xray:PutTraceSegments
              - xray:PutTelemetryRecords
              - xray:GetSamplingRules
              - xray:GetSamplingTargets
              - xray:GetSamplingStatisticSummaries
              - cloudwatch:PutMetricData
              - ssm:GetParameters
            Effect: Allow
            Resource: "*"
          - Action: events:PutEvents
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - InfrastructureCoreUnicornEventBusBBADDC7E
                - Arn
          - Action:
              - secretsmanager:GetSecretValue
              - secretsmanager:DescribeSecret
            Effect: Allow
            Resource:
              Ref: InfrastructureCorepostgresB0D0C6BB
          - Action:
              - secretsmanager:GetSecretValue
              - secretsmanager:DescribeSecret
            Effect: Allow
            Resource:
              Ref: InfrastructureCoredbSecretPassword1EC1CF00
        Version: "2012-10-17"
      PolicyName: InfrastructureImmDayUnicornStoreEcsTaskExecutionRoleDefaultPolicy4677B055
      Roles:
        - Ref: InfrastructureImmDayUnicornStoreEcsTaskExecutionRoleC06D6960
  InfrastructureImmDayUnicornStoreEksPodRole9B886474:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
              - sts:TagSession
            Effect: Allow
            Principal:
              Service: pods.eks.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      RoleName: unicornstore-eks-pod-role
  InfrastructureImmDayUnicornStoreEksPodRoleDefaultPolicyB30F3399:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: xray:PutTraceSegments
            Effect: Allow
            Resource: "*"
          - Action: events:PutEvents
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - InfrastructureCoreUnicornEventBusBBADDC7E
                - Arn
          - Action:
              - secretsmanager:GetSecretValue
              - secretsmanager:DescribeSecret
            Effect: Allow
            Resource:
              Ref: InfrastructureCorepostgresB0D0C6BB
          - Action:
              - ssm:DescribeParameters
              - ssm:GetParameters
              - ssm:GetParameter
              - ssm:GetParameterHistory
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:"
                  - Ref: AWS::Partition
                  - ":ssm:"
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - :parameter/
                  - Ref: InfrastructureCoreSsmParameterDatabaseJDBCConnectionString9BD78ECF
        Version: "2012-10-17"
      PolicyName: InfrastructureImmDayUnicornStoreEksPodRoleDefaultPolicyB30F3399
      Roles:
        - Ref: InfrastructureImmDayUnicornStoreEksPodRole9B886474
  InfrastructureImmDayUnicornStoreDbSecretsManagerPolicy0E37194B:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: ""
      ManagedPolicyName: unicornstore-db-secret-policy
      Path: /
      PolicyDocument:
        Statement:
          - Action: secretsmanager:ListSecrets
            Effect: Allow
            Resource: "*"
          - Action:
              - secretsmanager:GetResourcePolicy
              - secretsmanager:DescribeSecret
              - secretsmanager:GetSecretValue
              - secretsmanager:ListSecretVersionIds
            Effect: Allow
            Resource:
              Ref: InfrastructureCorepostgresB0D0C6BB
        Version: "2012-10-17"
  InfrastructureImmDayUnicornStoreEksEsoRoleA57024B8:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
              - sts:TagSession
            Effect: Allow
            Principal:
              Service: pods.eks.amazonaws.com
        Version: "2012-10-17"
      RoleName: unicornstore-eks-eso-role
  InfrastructureImmDayUnicornStoreEksEsoSmRoleC5A54C5E:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
              - sts:TagSession
            Effect: Allow
            Principal:
              AWS:
                Fn::GetAtt:
                  - InfrastructureImmDayUnicornStoreEksEsoRoleA57024B8
                  - Arn
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Ref: InfrastructureImmDayUnicornStoreDbSecretsManagerPolicy0E37194B
      RoleName: unicornstore-eks-eso-sm-role
  UnicornStoreEksClusterEKSClusterRole0A87A100:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: eks.amazonaws.com
          - Action:
              - sts:AssumeRole
              - sts:TagSession
            Effect: Allow
            Principal:
              Service: eks.amazonaws.com
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/AmazonEKSClusterPolicy
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/AmazonEKSComputePolicy
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/AmazonEKSBlockStoragePolicy
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/AmazonEKSLoadBalancingPolicy
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/AmazonEKSNetworkingPolicy
  UnicornStoreEksClusterEKSClusterNodeRole072C47D2:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/AmazonEKSWorkerNodeMinimalPolicy
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/AmazonEC2ContainerRegistryPullOnly
  UnicornStoreEksClusterEKSClusterBF11D771:
    Type: AWS::EKS::Cluster
    Properties:
      AccessConfig:
        AuthenticationMode: API
        BootstrapClusterCreatorAdminPermissions: true
      ComputeConfig:
        Enabled: true
        NodePools:
          - system
          - general-purpose
        NodeRoleArn:
          Fn::GetAtt:
            - UnicornStoreEksClusterEKSClusterNodeRole072C47D2
            - Arn
      KubernetesNetworkConfig:
        ElasticLoadBalancing:
          Enabled: true
        IpFamily: ipv4
      Logging:
        ClusterLogging:
          EnabledTypes:
            - Type: api
            - Type: audit
            - Type: authenticator
            - Type: controllerManager
            - Type: scheduler
      Name: unicorn-store
      ResourcesVpcConfig:
        EndpointPrivateAccess: true
        EndpointPublicAccess: true
        SecurityGroupIds:
          - Fn::GetAtt:
              - EksIdeSecurityGroupD3546F0A
              - GroupId
        SubnetIds:
          - Ref: InfrastructureCoreUnicornVpcPrivateSubnet1SubnetF5B67A45
          - Ref: InfrastructureCoreUnicornVpcPrivateSubnet2Subnet36418377
      RoleArn:
        Fn::GetAtt:
          - UnicornStoreEksClusterEKSClusterRole0A87A100
          - Arn
      StorageConfig:
        BlockStorage:
          Enabled: true
      UpgradePolicy:
        SupportType: STANDARD
      Version: "1.31"
  UnicornStoreEksClusterAccessEntry5CC5D459:
    Type: AWS::EKS::AccessEntry
    Properties:
      AccessPolicies:
        - AccessScope:
            Type: cluster
          PolicyArn: arn:aws:eks::aws:cluster-access-policy/AmazonEKSClusterAdminPolicy
      ClusterName: unicorn-store
      PrincipalArn:
        Fn::GetAtt:
          - WorkshopIdeIdeRoleF04F5802
          - Arn
    DependsOn:
      - UnicornStoreEksClusterEKSClusterBF11D771
Outputs:
  InfrastructureCoreUnicornStoreVpcId592B3A4E:
    Value:
      Ref: InfrastructureCoreUnicornVpc5023CF48
  WorkshopIdeVSCodeIdeIdeUrlCF925AAE:
    Description: Workshop IDE Url
    Value:
      Fn::Join:
        - ""
        - - https://
          - Fn::GetAtt:
              - WorkshopIdeVSCodeIdeIdeDistributionAC426B15
              - DomainName
    Export:
      Name: IdeUrl
  WorkshopIdeVSCodeIdeIdePassword8F9420CA:
    Description: Workshop IDE Password
    Value:
      Fn::GetAtt:
        - WorkshopIdeVSCodeIdeIdePasswordExporterDF8BA4D4
        - password
    Export:
      Name: IdePassword
  UnicornStoreLambdaUnicornStoreSpringApiEndpoint93C209C5:
    Value:
      Fn::Join:
        - ""
        - - https://
          - Ref: UnicornStoreLambdaUnicornStoreSpringApiD07C51D0
          - .execute-api.
          - Ref: AWS::Region
          - "."
          - Ref: AWS::URLSuffix
          - /
          - Ref: UnicornStoreLambdaUnicornStoreSpringApiDeploymentStageprodB72B0A46
          - /
  UnicornStoreLambdaunicornstorespringfunctionarnDEEB2688:
    Value:
      Fn::GetAtt:
        - UnicornStoreLambdaUnicornStoreSpringFunction3147CB7E
        - Arn
  UnicornStoreLambdaApiEndpointSpring810BBB8E:
    Value:
      Fn::Join:
        - ""
        - - https://
          - Ref: UnicornStoreLambdaUnicornStoreSpringApiD07C51D0
          - .execute-api.
          - Ref: AWS::Region
          - "."
          - Ref: AWS::URLSuffix
          - /
          - Ref: UnicornStoreLambdaUnicornStoreSpringApiDeploymentStageprodB72B0A46
          - /
  UnicornStoreLambdaBucketLambdaCodeFD039D4D:
    Value:
      Ref: UnicornStoreLambdaLambdaCodeBucketA83F0BD9
Parameters:
  SsmParameterValueawsserviceamiamazonlinuxlatestal2023amikernel61x8664C96584B6F00A464EAD1953AFF4B05118Parameter:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-x86_64
  IsWorkshopStudioAccount:
    Type: String
    Default: "no"

